{"version":3,"sources":["components/InlineNumberInput/InlineNumberInput.jsx","components/SelectInput/SelectInput.jsx","simulation/util.js","simulation/disc.js","simulation/discs.js","components/ThrowInput/ThrowInput.jsx","components/Disc.jsx","components/FlightPath.jsx","components/FlightControls.jsx","components/ViewBox/ViewBox.jsx","simulation/transform.js","simulation/simulate.js","App.js","reportWebVitals.js","index.js"],"names":["InlineNumberInput","props","id","uniqueId","className","htmlFor","label","name","type","value","onChange","event","SelectInput","children","interp","x","xp","yp","Array","isArray","map","a","b","length","vec3","y","z","THREE","Disc","this","aoarange","cl","cd","cm","jxy","jz","diam","aoa","aviar","wraith","discs","ThrowInput","useState","open","setOpen","handleChange","e","target","t","throw","onThrowChange","onClick","disc","index","mass","speed","spin","direction","launchAngle","noseAngle","rollAngle","React","forwardRef","ref","radius","aspect","scale","color","FlightPath","points","eulers","hyzer","Math","PI","lefts","i","applyEuler","add","rights","normals","ribbonGeometry","useMemo","vertices","norms","colours","c","interpolateSpectral","exp","toArray","push","indices","geom","setIndex","setAttribute","flat","object","attach","toneMapped","vertexColors","side","FlightControls","discRef","followRef","follow","fullRef","full","throwerRef","thrower","landingRef","landing","scrubberRef","scrubber","centre","controlsRef","useRef","initialPos","Vector3","lastIndex","current","diff","targetLook","clone","bbox","Box3","setFromPoints","targetPos","doLerp","handleFull","checked","copy","set","max","min","handleThrower","handleLanding","last","useEffect","r","addEventListener","removeEventListener","useFrame","from","to","sub","vectorDifference","position","rotation","lerp","OrbitControls","mergeRefs","onStart","onEnd","ViewBox","result","pos_g","v","ori_g","orientation","zmax","apply","p","count","defaultChecked","defaultValue","resize","scroll","debounce","camera","intensity","decay","args","Transform","angles","phi","theta","psi","cosPhi","cos","cosTheta","cosPsi","sinPhi","sin","sinTheta","sinPsi","beta","alpha","dt","arraySize","maxSteps","huckit","roll_angle","nose_angle","launch_angle","launch_height","step","vel_g","acl_g","rot_g","acl_d","vel_d","rot_d","acl_s","vel_s","rot_s","acl_w","vel_w","drag","lift","mom","launch_angle_d","applyMatrix3","T","groundDisc","ixy","iz","area","weight","ii","atan2","discSlip","slipWind","grav_w","getCd","getCl","getCm","windSlip","slipDisc","discGround","avg_acl_g","multiplyScalar","avg_rot_g","slice","initialThrows","simulate","params","App","throws","setThrows","setResult","newThrow","handleThrowChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af1560d4.chunk.js","sourcesContent":["import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport \"./InlineNumberInput.css\";\n\nexport function InlineNumberInput(props) {\n\tconst id = uniqueId();\n\tconst handleChange = (event) => props.onChange(event);\n\n\treturn (\n\t\t<div className=\"inline-number-input\">\n\t\t\t<label htmlFor={id}>{props.label}</label>\n\t\t\t<input\n\t\t\t\tid={id}\n\t\t\t\tname={props.name}\n\t\t\t\ttype=\"number\"\n\t\t\t\tvalue={props.value}\n\t\t\t\tonChange={handleChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport \"./SelectInput.css\";\n\nexport function SelectInput(props) {\n\tconst id = uniqueId();\n\tconst handleChange = (event) => props.onChange(event);\n\n\treturn (\n\t\t<div className=\"select-input\">\n\t\t\t<label htmlFor={id}>{props.label}</label>\n\t\t\t<select\n\t\t\t\tid={id}\n\t\t\t\tname={props.name}\n\t\t\t\tvalue={props.value}\n\t\t\t\tonChange={handleChange}\n\t\t\t>\n\t\t\t\t{props.children}\n\t\t\t</select>\n\t\t</div>\n\t);\n}\n","import * as THREE from 'three';\n\n/**\n * Piecewise linear interpolation of the y value at x, given x and y\n * coordinates defining points on the piecewise line\n * @param {number} x x coordinate to interpolate y value\n * @param {Array} xp x coordinates\n * @param {Array} yp y coordinates\n * @returns {number}\n */\nexport function interp(x, xp, yp) {\n    if (Array.isArray(x)) return x.map(value => interp(value, xp, yp));\n    if (x < xp[0]) return yp[0];\n    let a = 0, b = 1;\n    for (; a < xp.length - 1; a++, b++) {\n        if (xp[a + 1] > x) {\n            return (yp[a] * (xp[b] - x) + yp[b] * (x - xp[a])) / (xp[b] - xp[a]);\n        }\n    }\n    return yp[yp.length - 1];\n}\n\nexport function vec3(x, y, z) {\n    return new THREE.Vector3(x, y, z);\n}\n\nexport function mat3(a1, a2, a3, b1, b2, b3, c1, c2, c3) {\n    return new THREE.Matrix3().set(a1, a2, a3, b1, b2, b3, c1, c2, c3);\n}","import { interp } from './util';\n\nexport default class Disc {\n    constructor(name) {\n      this.name = name;\n      this.aoarange = [0]; // Angle of Attact at which the aerodynamic coefficients have been measured. Must be sorted in ascending order\n      this.cl = [0]; // Coefficients of lift for each AoA\n      this.cd = [0]; // Coefficients of drag for each AoA\n      this.cm = [0]; // Coefficients of pitching moment for each AoA\n      this.jxy = 0; // Normalized mass moment of inertia about the roll/pitch axis in m^2\n      this.jz = 0; // Normalized mass moment of inertia about the spin axis in m^2\n      this.diam = 0; // Disc diameter in m\n    }\n    \n    getCl(aoa) {\n      return interp(aoa, this.aoarange, this.cl);\n    }\n    \n    getCd(aoa) {\n      return interp(aoa, this.aoarange, this.cd);\n    }\n    \n    getCm(aoa) {\n      return interp(aoa, this.aoarange, this.cm);\n    }\n  }","import Disc from './disc';\n\nexport const aviar = new Disc(\"Aviar\");\naviar.aoarange = [-1.570796327, -0.5235987756, -0.0872664626, -0.06981317008, -0.05235987756, -0.03490658504, -0.01745329252, 0, 0.01745329252, 0.03490658504, 0.05235987756, 0.06981317008, 0.0872664626, 0.1047197551, 0.1221730476, 0.1396263402, 0.1570796327, 0.1745329252, 0.1919862177, 0.2094395102, 0.2268928028, 0.2443460953, 0.2617993878, 0.7853981634, 0.872664626, 1.570796327];\naviar.cl = [0, -1, -0.088, -0.049, -0.009, 0.034, 0.093, 0.154, 0.21, 0.256, 0.304, 0.343, 0.383, 0.426, 0.468, 0.508, 0.549, 0.591, 0.631, 0.672, 0.702, 0.74, 0.78, 1.6, 0.8, 0];\naviar.cd = [0.4, 0.188, 0.076, 0.071, 0.07, 0.072, 0.072, 0.084, 0.088, 0.085, 0.102, 0.117, 0.133, 0.141, 0.157, 0.174, 0.189, 0.203, 0.216, 0.226, 0.245, 0.266, 0.281, 0.7, 0.5, 0.6];\naviar.cm = [0, -0.08, -0.015, -0.016, -0.011, -0.01, -0.013, -0.018, -0.018, -0.017, -0.014, -0.014, -0.011, -0.008, -0.005, 0, 0.005, 0.009, 0.011, 0.02, 0.024, 0.032, 0.039, 0.23, 0.02, 0];\naviar.jxy = 4.23e-3;\naviar.jz = 8.46e-3;\naviar.diam = 0.21;\n\n// Placeholder data, just a copy of Aviar for now\nexport const wraith = new Disc(\"Wraith\");\nwraith.aoarange = [-1.570796327, -0.5235987756, -0.0872664626, -0.06981317008, -0.05235987756, -0.03490658504, -0.01745329252, 0, 0.01745329252, 0.03490658504, 0.05235987756, 0.06981317008, 0.0872664626, 0.1047197551, 0.1221730476, 0.1396263402, 0.1570796327, 0.1745329252, 0.1919862177, 0.2094395102, 0.2268928028, 0.2443460953, 0.2617993878, 0.7853981634, 0.872664626, 1.570796327];\nwraith.cl = [0, -1, -0.088, -0.049, -0.009, 0.034, 0.093, 0.154, 0.21, 0.256, 0.304, 0.343, 0.383, 0.426, 0.468, 0.508, 0.549, 0.591, 0.631, 0.672, 0.702, 0.74, 0.78, 1.6, 0.8, 0];\nwraith.cd = [0.4, 0.188, 0.076, 0.071, 0.07, 0.072, 0.072, 0.084, 0.088, 0.085, 0.102, 0.117, 0.133, 0.141, 0.157, 0.174, 0.189, 0.203, 0.216, 0.226, 0.245, 0.266, 0.281, 0.7, 0.5, 0.6];\nwraith.cm = [0, -0.08, -0.015, -0.016, -0.011, -0.01, -0.013, -0.018, -0.018, -0.017, -0.014, -0.014, -0.011, -0.008, -0.005, 0, 0.005, 0.009, 0.011, 0.02, 0.024, 0.032, 0.039, 0.23, 0.02, 0];\nwraith.jxy = 4.23e-3;\nwraith.jz = 8.46e-3;\nwraith.diam = 0.21;\n\nexport const discs = [aviar, wraith];","import React, { useState } from \"react\";\nimport { InlineNumberInput } from \"../InlineNumberInput/InlineNumberInput\";\nimport { SelectInput } from \"../SelectInput/SelectInput\";\nimport { discs } from \"../../simulation/discs\";\nimport \"./ThrowInput.css\";\n\nexport function ThrowInput(props) {\n\tconst [open, setOpen] = useState(false);\n\n\tconst handleChange = (e) => {\n\t\tlet target = e.target.name;\n\t\tlet t = props.throw;\n\t\tt[target] = e.target.value;\n\t\tprops.onThrowChange(t);\n\t};\n\n\tconst t = props.throw;\n\n\treturn (\n\t\t<div className=\"throw-input\">\n\t\t\t<header onClick={() => setOpen(!open)}>\n\t\t\t\t<span className=\"heading\">{discs[t.disc].name}</span>\n\t\t\t</header>\n\n\t\t\t{open && (\n\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlabel=\"Disc\"\n\t\t\t\t\t\tname=\"disc\"\n\t\t\t\t\t\tvalue={t.disc}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t>\n\t\t\t\t\t\t{discs.map((disc, index) => (\n\t\t\t\t\t\t\t<option key={disc.name} value={index}>{disc.name}</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</SelectInput>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Mass (g)\"\n\t\t\t\t\t\tname=\"mass\"\n\t\t\t\t\t\tvalue={t.mass}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Speed (mph)\"\n\t\t\t\t\t\tname=\"speed\"\n\t\t\t\t\t\tvalue={t.speed}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Spin (rev/s)\"\n\t\t\t\t\t\tname=\"spin\"\n\t\t\t\t\t\tvalue={t.spin}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlabel=\"Dir.\"\n\t\t\t\t\t\tname=\"direction\"\n\t\t\t\t\t\tvalue={t.direction}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"1\">Clockwise (RHBH/LHFH)</option>\n\t\t\t\t\t\t<option value=\"-1\">Anti-Clockwise (LHBH/RHFH)</option>\n\t\t\t\t\t</SelectInput>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Launch Angle (deg)\"\n\t\t\t\t\t\tname=\"launchAngle\"\n\t\t\t\t\t\tvalue={t.launchAngle}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Nose Angle (deg)\"\n\t\t\t\t\t\tname=\"noseAngle\"\n\t\t\t\t\t\tvalue={t.noseAngle}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Roll Angle (deg)\"\n\t\t\t\t\t\tname=\"rollAngle\"\n\t\t\t\t\t\tvalue={t.rollAngle}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nexport const Disc = React.forwardRef(\n\t({ radius, aspect, ...props }, ref) => {\n\t\treturn (\n\t\t\t<mesh\n\t\t\t\tref={ref}\n\t\t\t\tscale={[radius, radius * aspect, radius]}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<sphereGeometry />\n\t\t\t\t<meshStandardMaterial color=\"#ffa500\" />\n\t\t\t</mesh>\n\t\t);\n\t}\n);\n\nexport default Disc;","import React, { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { interpolateSpectral } from \"d3-scale-chromatic\";\nimport { vec3 } from \"../simulation/util\";\n\nconst intensity = 30;\nconst intensify = (x) => 1 / (1 + Math.exp(intensity * (x - 0.5)));\n\nexport default function FlightPath(props) {\n\tconst radius = props.radius;\n\tconst points = props.points;\n\tconst eulers = props.eulers;\n\n\tconst hyzer = eulers.map((e) => (e.z + Math.PI / 2) / Math.PI);\n\n\tconst lefts = eulers.map((e, i) =>\n\t\tvec3(-radius, 0, 0).applyEuler(e).add(points[i])\n\t);\n\tconst rights = eulers.map((e, i) =>\n\t\tvec3(radius, 0, 0).applyEuler(e).add(points[i])\n\t);\n\tconst normals = eulers.map((e) => vec3(0, -1, 0).applyEuler(e));\n\n\tconst ribbonGeometry = useMemo(() => {\n\t\tlet vertices = [];\n\t\tlet norms = [];\n\t\tlet colours = [];\n\t\tfor (let i = 0; i < lefts.length; i++) {\n\t\t\tlet c = new THREE.Color(\n\t\t\t\tinterpolateSpectral(intensify(hyzer[i]))\n\t\t\t).toArray();\n\n\t\t\tvertices.push(lefts[i].toArray());\n\t\t\tnorms.push(normals[i].toArray());\n\t\t\tcolours.push(c);\n\n\t\t\tvertices.push(rights[i].toArray());\n\t\t\tnorms.push(normals[i].toArray());\n\t\t\tcolours.push(c);\n\t\t}\n\n\t\tlet indices = [];\n\t\tfor (let i = 0; i < lefts.length - 1; i++) {\n\t\t\tindices.push(i * 2, i * 2 + 1, i * 2 + 2); // triangle 1\n\t\t\tindices.push(i * 2 + 1, i * 2 + 3, i * 2 + 2); // triangle 2\n\t\t}\n\n\t\tlet geom = new THREE.BufferGeometry();\n\t\tgeom.setIndex(indices);\n\t\tgeom.setAttribute(\n\t\t\t\"position\",\n\t\t\tnew THREE.Float32BufferAttribute(vertices.flat(), 3)\n\t\t);\n\t\tgeom.setAttribute(\n\t\t\t\"normal\",\n\t\t\tnew THREE.Float32BufferAttribute(norms.flat(), 3)\n\t\t);\n\t\tgeom.setAttribute(\n\t\t\t\"color\",\n\t\t\tnew THREE.Float32BufferAttribute(colours.flat(), 3)\n\t\t);\n\t\treturn geom;\n\t}, [lefts, rights, normals, hyzer]);\n\n\treturn (\n\t\t<mesh>\n\t\t\t<primitive object={ribbonGeometry} attach=\"geometry\" />\n\t\t\t<meshBasicMaterial\n\t\t\t\ttoneMapped={false}\n\t\t\t\tvertexColors\n\t\t\t\tside={THREE.DoubleSide}\n\t\t\t/>\n\t\t</mesh>\n\t);\n}\n","import React, { useEffect, useRef } from \"react\";\nimport { Box3, Vector3 } from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\nimport mergeRefs from \"react-merge-refs\";\nimport { OrbitControls } from \"@react-three/drei\";\n\nexport const FlightControls = React.forwardRef(\n\t(\n\t\t{\n\t\t\tdisc: discRef,\n\t\t\tfollow: followRef,\n\t\t\tfull: fullRef,\n\t\t\tthrower: throwerRef,\n\t\t\tlanding: landingRef,\n\t\t\tscrubber: scrubberRef,\n\t\t\tcentre,\n\t\t\tpoints,\n\t\t\teulers,\n\t\t\t...props\n\t\t},\n\t\tref\n\t) => {\n\t\tconst controlsRef = useRef();\n\n\t\tconst initialPos = new Vector3(0, 1.8, -5);\n\t\tlet lastIndex = scrubberRef.current.value;\n\t\tlet diff = new Vector3();\n\t\tlet targetLook = points[lastIndex].clone();\n\t\tlet bbox = new Box3().setFromPoints(points);\n\t\tlet targetPos = initialPos.clone();\n\t\tlet doLerp = true;\n\n\t\tconst vectorDifference = (vec3, from, to) => vec3.copy(to).sub(from);\n\n\t\tconst handleFull = () => {\n\t\t\tdoLerp = true;\n\t\t\tfollowRef.current.checked = false;\n\t\t\ttargetLook.copy(centre);\n\t\t\ttargetPos.set(bbox.max.x + 5, bbox.max.y, bbox.min.z - 5);\n\t\t};\n\n\t\tconst handleThrower = () => {\n\t\t\tdoLerp = true;\n\t\t\tfollowRef.current.checked = false;\n\t\t\ttargetLook.copy(points[0]);\n\t\t\ttargetPos.set(0, 1.8, -5);\n\t\t}\n\n\t\tconst handleLanding = () => {\n\t\t\tdoLerp = true;\n\t\t\tfollowRef.current.checked = false;\n\t\t\tconst last = points[points.length - 1]\n\t\t\ttargetLook.copy(last);\n\t\t\ttargetPos.copy(bbox.max).add(new Vector3(5, 0, 5));\n\t\t}\n\n\t\tuseEffect(() => {\n\t\t\tconst r = fullRef.current;\n\t\t\tr.addEventListener(\"click\", handleFull);\n\t\t\treturn () => r.removeEventListener(\"click\", handleFull);\n\t\t});\n\n\t\tuseEffect(() => {\n\t\t\tconst r = throwerRef.current;\n\t\t\tr.addEventListener(\"click\", handleThrower);\n\t\t\treturn () => r.removeEventListener(\"click\", handleThrower);\n\t\t});\n\n\t\tuseEffect(() => {\n\t\t\tconst r = landingRef.current;\n\t\t\tr.addEventListener(\"click\", handleLanding);\n\t\t\treturn () => r.removeEventListener(\"click\", handleLanding);\n\t\t});\n\n\t\tuseFrame(() => {\n\t\t\tconst index = scrubberRef.current.value;\n\n\t\t\tif (index !== lastIndex) {\n\t\t\t\tvectorDifference(diff, discRef.current.position, points[index]);\n\t\t\t\tdiscRef.current.position.copy(points[index]);\n\t\t\t\tdiscRef.current.rotation.copy(eulers[index]);\n\n\t\t\t\tif (followRef.current.checked) {\n\t\t\t\t\tdoLerp = true;\n\t\t\t\t\ttargetPos.add(diff);\n\t\t\t\t\ttargetLook.copy(points[index]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (doLerp) {\n\t\t\t\tcontrolsRef.current.target.lerp(targetLook, 0.1);\n\t\t\t\tcontrolsRef.current.object.position.lerp(targetPos, 0.1);\n\t\t\t}\n\n\t\t\tlastIndex = index;\n\t\t});\n\n\t\treturn (\n\t\t\t<OrbitControls\n\t\t\t\tref={mergeRefs([controlsRef, ref])}\n\t\t\t\tonStart={() => (doLerp = false)}\n\t\t\t\tonEnd={() =>\n\t\t\t\t\ttargetPos.copy(controlsRef.current.object.position)\n\t\t\t\t}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t);\n\t}\n);\n\nexport default FlightControls;\n","import React, { useRef } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { vec3 } from \"../../simulation/util\";\n\nimport Disc from \"../Disc\";\nimport FlightPath from \"../FlightPath\";\nimport FlightControls from \"../FlightControls\";\n\nimport \"./ViewBox.css\";\n\nconst buffer = 5;\n\nexport function ViewBox(props) {\n\tconst controlsRef = useRef();\n\tconst scrubberRef = useRef();\n\tconst followRef = useRef();\n\tconst fullRef = useRef();\n\tconst throwerRef = useRef();\n\tconst landingRef = useRef();\n\tconst discRef = useRef();\n\tconst radius = 0.1;\n\tconst aspect = 0.1;\n\n\t// fix coordinate system\n\tconst points = props.result.pos_g.map((v) => vec3(v.y, v.z, v.x));\n\t// ori_g: x=roll y=pitch z=yaw, applied in that order\n\tconst eulers = props.result.ori_g.map(\n\t\t(orientation) =>\n\t\t\tnew THREE.Euler(\n\t\t\t\t-orientation.y,\n\t\t\t\torientation.z,\n\t\t\t\t-orientation.x,\n\t\t\t\t\"ZXY\"\n\t\t\t)\n\t);\n\n\tlet zmax = Math.max.apply(\n\t\tMath,\n\t\tpoints.map((p) => p.z)\n\t);\n\tlet count = points.length;\n\n\tconst width = 10;\n\tconst length = zmax + 2 * buffer;\n\tconst centre = vec3(0, 0, zmax / 2);\n\n\treturn (\n\t\t<div className=\"ui\">\n\t\t\t<div className=\"settings-camera\">\n\t\t\t\t<input ref={followRef} id=\"follow\" type=\"checkbox\" defaultChecked={true} />\n\t\t\t\t<label htmlFor=\"follow\">Follow disc</label>\n\n\t\t\t\t<input ref={fullRef} type=\"button\" value=\"Full path\" />\n\t\t\t\t<input ref={throwerRef} type=\"button\" value=\"Thrower\" />\n\t\t\t\t<input ref={landingRef} type=\"button\" value=\"Landing\" />\n\t\t\t</div>\n\t\t\t<div className=\"scrubber\">\n\t\t\t\t<input ref={scrubberRef} type=\"range\" min=\"0\" max={count - 1} defaultValue=\"0\" />\n\t\t\t</div>\n\t\t\t<Canvas\n\t\t\t\tclassName=\"main\"\n\t\t\t\tresize={{ scroll: true, debounce: 0 }}\n\t\t\t\tcamera={{ position: [0, 0, -5] }}\n\t\t\t>\n\t\t\t\t<FlightControls\n\t\t\t\t\tref={controlsRef}\n\t\t\t\t\tdisc={discRef}\n\t\t\t\t\tfollow={followRef}\n\t\t\t\t\tfull={fullRef}\n\t\t\t\t\tthrower={throwerRef}\n\t\t\t\t\tlanding={landingRef}\n\t\t\t\t\tcentre={centre}\n\t\t\t\t\tscrubber={scrubberRef}\n\t\t\t\t\tpoints={points}\n\t\t\t\t\teulers={eulers}\n\t\t\t\t/>\n\n\t\t\t\t<ambientLight color={0x202020} />\n\t\t\t\t<pointLight position={[0, 20, 25]} intensity={0.5} decay={2} />\n\n\t\t\t\t<Disc\n\t\t\t\t\tref={discRef}\n\t\t\t\t\tradius={radius}\n\t\t\t\t\taspect={aspect}\n\t\t\t\t\tposition={points[0]}\n\t\t\t\t\trotation={eulers[0]}\n\t\t\t\t/>\n\t\t\t\t<FlightPath radius={radius} points={points} eulers={eulers} />\n\n\t\t\t\t<mesh\n\t\t\t\t\tposition={[0, 0, length / 2 - buffer]}\n\t\t\t\t\trotation={[-Math.PI / 2, 0, 0]}\n\t\t\t\t>\n\t\t\t\t\t<planeGeometry args={[width, length]} />\n\t\t\t\t\t<meshStandardMaterial color=\"#00aa00\" />\n\t\t\t\t</mesh>\n\t\t\t</Canvas>\n\t\t</div>\n\t);\n}\n","import * as THREE from 'three';\n\nexport default class Transform {\n    static groundDisc(angles) {\n      const phi = angles.x;\n      const theta = angles.y;\n      const psi = angles.z;\n      \n      const cosPhi = Math.cos(phi);\n      const cosTheta = Math.cos(theta);\n      const cosPsi = Math.cos(psi);\n  \n      const sinPhi = Math.sin(phi);\n      const sinTheta = Math.sin(theta);\n      const sinPsi = Math.sin(psi);\n      \n      return new THREE.Matrix3().set(\n        cosTheta*cosPsi,  sinPhi*sinTheta*cosPsi - cosPhi*sinPsi,   cosPhi*sinTheta*cosPsi + sinPhi*sinPhi,\n        cosTheta*sinPsi,  sinPhi*sinTheta*sinPsi + cosPhi*cosPsi,   cosPhi*sinTheta*sinPsi - sinPhi*cosPsi,\n        -sinTheta,        sinPhi*cosTheta,                          cosPhi*cosTheta\n      );\n    }\n    \n    static discGround(angles) {\n      const phi = angles.x;\n      const theta = angles.y;\n      const psi = angles.z;\n  \n      const cosPhi = Math.cos(phi);\n      const cosTheta = Math.cos(theta);\n      const cosPsi = Math.cos(psi);\n  \n      const sinPhi = Math.sin(phi);\n      const sinTheta = Math.sin(theta);\n      const sinPsi = Math.sin(psi);\n  \n      return new THREE.Matrix3().set(\n        cosTheta*cosPsi,                         cosTheta*sinPsi,                         -sinTheta,\n        sinPhi*sinTheta*cosPsi - cosPhi*sinPsi,  sinPhi*sinTheta*sinPsi + cosPhi*cosPsi,  sinPhi*cosTheta,\n        cosPhi*sinTheta*cosPsi + sinPhi*sinPsi,  cosPhi*sinTheta*sinPsi - sinPhi*cosPsi,  cosPhi*cosTheta\n      );\n    }\n    \n    static discSlip(beta) {\n      const cos = Math.cos(beta);\n      const sin = Math.sin(beta);\n      \n      return new THREE.Matrix3().set(\n        cos, -sin, 0,\n        sin, cos,  0,\n        0,   0,    1\n      );\n    }\n    \n    static slipDisc(beta) {\n      const cos = Math.cos(beta);\n      const sin = Math.sin(beta);\n      \n      return new THREE.Matrix3().set(\n        cos, sin, 0,\n        -sin, cos,  0,\n        0,   0,    1\n      );\n    }\n    \n    static slipWind(alpha) {\n      const cos = Math.cos(alpha);\n      const sin = Math.sin(alpha);\n      \n      return new THREE.Matrix3().set(\n        cos, 0,  -sin,\n        0,   1,  0,\n        sin, 0,  cos\n      );\n    }\n    \n    static windSlip(alpha) {\n      const cos = Math.cos(alpha);\n      const sin = Math.sin(alpha);\n      \n      return new THREE.Matrix3().set(\n        cos, 0,  sin,\n        0,   1,  0,\n        -sin, 0,  cos\n      );\n    }\n  }","import T from \"./transform\";\nimport { vec3 } from \"./util\";\n\nconst rho = 1.18; // Air density in kg/m^3\nconst g = 9.81; // Gravitational acceleration in m/s^2\n\nconst dt = 0.01; // Timestep in seconds\nconst maxSteps = 1000;\nconst arraySize = maxSteps + 1;\n\n/**\n * Simulates a disc and throw based on the method in _Simulation of a\n * spin stabilized sports disc_, Crowther and Potts (2007)\n * and [HuckIt](https://colab.research.google.com/drive/1fwoivf9S6tro1A23yEetisPgexmhfjIK?usp=sharing#scrollTo=PwVmextgTsy7)\n * @typedef { import(\"./disc.js\").default } Disc\n * @param {Disc} disc disc to simulate\n * @param {number} roll_angle in radians\n * @param {number} nose_angle in radians\n * @param {number} launch_angle in radians\n * @param {number} launch_height in metres\n * @param {number} speed in metres per second\n * @param {number} spin in radians per second\n * @param {number} mass in grams\n */\nexport default function huckit(\n  disc,\n  roll_angle,\n  nose_angle,\n  launch_angle,\n  launch_height,\n  speed,\n  spin,\n  mass\n) {\n  // Simulation controls\n  let step = 0; // Current step\n  let t = new Array(arraySize);\n\n  // Ground coordinate system\n  let pos_g = new Array(arraySize); // Disc position in m\n  let vel_g = new Array(arraySize); // Disc velocity in m/s\n  let acl_g = new Array(arraySize); // Disc acceleration in m/s^2\n  let ori_g = new Array(arraySize); // Disc roll, pitch, and yaw in rad\n  let rot_g = new Array(arraySize); // Disc roll, pitch, and yaw rate in rad/s\n\n  // Disc coordinate system\n  let acl_d = new Array(arraySize);\n  let vel_d = new Array(arraySize);\n  let rot_d = new Array(arraySize);\n\n  // Side-slip coordinate system\n  let acl_s = new Array(arraySize);\n  let vel_s = new Array(arraySize);\n  let rot_s = new Array(arraySize);\n  let beta = new Array(arraySize);\n\n  // Wind coordinate system\n  let acl_w = new Array(arraySize);\n  let vel_w = new Array(arraySize);\n  let alpha = new Array(arraySize);\n\n  // Aerodynamic forces\n  let drag = new Array(arraySize);\n  let lift = new Array(arraySize);\n  let mom = new Array(arraySize);\n\n  // Define disc orientation and velocity from inputs\n  ori_g[step] = vec3(roll_angle, nose_angle, 0);\n  vel_g[step] = vec3(\n    speed * Math.cos(launch_angle),\n    0,\n    speed * Math.sin(launch_angle)\n  );\n  let launch_angle_d = vec3(0, launch_angle, 0).applyMatrix3(\n    T.groundDisc(ori_g[step])\n  );\n  ori_g[step].add(launch_angle_d);\n\n  // Define environmental constants\n  pos_g[step] = vec3(0, 0, launch_height);\n\n  // Define derived constants\n  const diam = disc.diam;\n  const ixy = disc.jxy * mass; // Moment of inertia of disc about roll axis in kg-m^2\n  const iz = disc.jz * mass; // Moment of inertia of disc about spin agis in kg-m^2\n  const area = Math.PI * (0.5 * diam) ** 2; // Area of disc in m^2\n  const weight = g * mass; // Gravitational force acting on the disc centre of mass in N\n\n  // Loop until disc hits the ground, z-position=0\n  while (pos_g[step].z > 0) {\n    if (step >= maxSteps) break;\n\n    let ii = 0;\n    while (true) {\n      // Transform ground velocity to wind coordinate system\n      vel_d[step] = vel_g[step].clone().applyMatrix3(T.groundDisc(ori_g[step])); // Transform ground velocity to disc coordinate system\n      beta[step] = -Math.atan2(vel_d[step].y, vel_d[step].x); // Calculate side slip angle\n      vel_s[step] = vel_d[step].clone().applyMatrix3(T.discSlip(beta[step])); // Transform velocity to zero side slip coordinate system\n      alpha[step] = -Math.atan2(vel_s[step].z, vel_s[step].x); // Calculate angle of attack\n      vel_w[step] = vel_s[step].clone().applyMatrix3(T.slipWind(alpha[step])); // Transform velocity to wind coordinate system where aerodynamic calculations can be made\n\n      // Transform gravity loads to wind coordinate system\n      const grav_d = vec3(0, 0, -weight).applyMatrix3(\n        T.groundDisc(ori_g[step])\n      );\n      const grav_s = grav_d.clone().applyMatrix3(T.discSlip(beta[step]));\n      const grav_w = grav_s.clone().applyMatrix3(T.slipWind(alpha[step]));\n\n      // Calculate aerodynamic forces on the disc\n      drag[step] =\n        0.5 * rho * vel_w[step].x ** 2 * area * disc.getCd(alpha[step]); // Drag force in N\n      lift[step] =\n        0.5 * rho * vel_w[step].x ** 2 * area * disc.getCl(alpha[step]); // Lift force in N\n      mom[step] =\n        0.5 * rho * vel_w[step].x ** 2 * area * diam * disc.getCm(alpha[step]); // Calculate pitching moment in N-m\n\n      // Calculate body accelerations from second law and force balances\n      acl_w[step] = vec3();\n      rot_s[step] = vec3();\n      acl_w[step].x = (grav_w.x - drag[step]) / mass; // Acceleration due to drag\n      acl_w[step].z = (grav_w.z + lift[step]) / mass; // Acceleration due to lift\n      acl_w[step].y = grav_w.y / mass; // Acceleration due to side loading\n      rot_s[step].x = -mom[step] / (spin * (ixy - iz)); // Roll rate from pitching moment\n\n      // Transform disc acceleration to ground coordinate system\n      acl_s[step] = acl_w[step].clone().applyMatrix3(T.windSlip(alpha[step]));\n      acl_d[step] = acl_s[step].clone().applyMatrix3(T.slipDisc(beta[step]));\n      acl_g[step] = acl_d[step].clone().applyMatrix3(T.discGround(ori_g[step]));\n\n      // Transform roll rate from zero side-slip to ground coordinate system\n      rot_d[step] = rot_s[step].clone().applyMatrix3(T.slipDisc(beta[step]));\n      rot_g[step] = rot_d[step].clone().applyMatrix3(T.discGround(ori_g[step]));\n\n      // Perform one inner iteration to refine speed and position vectors\n      if (step === 0) break; // Do not run inner iterations for initial time step\n      if (ii >= 1) break; // Only run one inner iteration\n\n      // Calculate average accelerations and rotation rates between current and previous time steps\n      const avg_acl_g = acl_g[step - 1]\n        .clone()\n        .add(acl_g[step])\n        .multiplyScalar(0.5);\n      const avg_rot_g = rot_g[step - 1]\n        .clone()\n        .add(rot_g[step])\n        .multiplyScalar(0.5);\n\n      // Calculate new velocity, position, and orientation for current time step\n      vel_g[step] = vel_g[step - 1]\n        .clone()\n        .add(avg_acl_g.clone().multiplyScalar(dt));\n      pos_g[step] = pos_g[step - 1]\n        .clone()\n        .add(vel_g[step - 1].clone().multiplyScalar(dt))\n        .add(avg_acl_g.clone().multiplyScalar(0.5 * dt ** 2));\n      ori_g[step] = ori_g[step - 1]\n        .clone()\n        .add(avg_rot_g.clone().multiplyScalar(dt));\n\n      ii++;\n    }\n\n    // Estimate disc velocity, position, and orientation at next time step\n    vel_g[step + 1] = vel_g[step]\n      .clone()\n      .add(acl_g[step].clone().multiplyScalar(dt));\n    pos_g[step + 1] = pos_g[step]\n      .clone()\n      .add(vel_g[step].clone().multiplyScalar(dt))\n      .add(acl_g[step].clone().multiplyScalar(0.5 * dt ** 2));\n    ori_g[step + 1] = ori_g[step]\n      .clone()\n      .add(rot_g[step].clone().multiplyScalar(dt));\n\n    // Update simulation variables\n    t[step + 1] = t[step] + dt;\n    step++;\n  }\n\n  return {\n    t: t.slice(0, step),\n    lift: lift.slice(0, step),\n    drag: drag.slice(0, step),\n    mom: mom.slice(0, step),\n    alpha: alpha.slice(0, step),\n    beta: beta.slice(0, step),\n    pos_g: pos_g.slice(0, step),\n    vel_g: vel_g.slice(0, step),\n    acl_g: acl_g.slice(0, step),\n    ori_g: ori_g.slice(0, step),\n    rot_g: rot_g.slice(0, step),\n    vel_d: vel_d.slice(0, step),\n    vel_w: vel_w.slice(0, step),\n    acl_w: acl_w.slice(0, step),\n    rot_s: rot_s.slice(0, step),\n  };\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { ThrowInput } from \"./components/ThrowInput/ThrowInput\";\nimport { ViewBox } from \"./components/ViewBox/ViewBox\";\nimport { discs } from \"./simulation/discs\";\nimport huckit from \"./simulation/simulate.js\";\n\nconst initialThrows = [\n\t{\n\t\tid: 0,\n\t\tdisc: 0, // aviar\n\t\tmass: 175,\n\t\tspeed: 50,\n\t\tspin: 27,\n\t\tdirection: 1,\n\t\tlaunchAngle: 10,\n\t\tnoseAngle: 4,\n\t\trollAngle: 8,\n\t},\n\t{\n\t\tid: 1,\n\t\tdisc: 1,\n\t\tmass: 170,\n\t\tspeed: 30,\n\t\tspin: 20,\n\t\tdirection: 1,\n\t\tlaunchAngle: 8,\n\t\tnoseAngle: 6,\n\t\trollAngle: 0,\n\t},\n];\n\nconst simulate = (t) => {\n\tlet params = [\n\t\t(t.rollAngle * Math.PI) / 180.0,\n\t\t(t.noseAngle * Math.PI) / 180.0,\n\t\t(t.launchAngle * Math.PI) / 180.0,\n\t\t1.8,\n\t\tt.speed * 0.44704,\n\t\tt.spin * t.direction * 2 * Math.PI,\n\t\tt.mass / 1000,\n\t];\n\treturn huckit(discs[t.disc], ...params);\n};\n\nexport default function App() {\n\tlet [throws, setThrows] = useState(initialThrows);\n\tlet [result, setResult] = useState(simulate(throws[0]));\n\n\tconst handleThrowChange = (index, t) => {\n\t\tlet result = simulate(t);\n\t\tsetResult(result);\n\n\t\tlet copy = [...throws];\n\t\tcopy[index] = t;\n\t\tsetThrows(copy);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<ViewBox result={result}></ViewBox>\n\t\t\t<h1>Disc Flyte</h1>\n\t\t\t<div className=\"throw-container\">\n\t\t\t\t<h2 className=\"throw-header\">Throws</h2>\n\n\t\t\t\t<div className=\"throw-list\">\n\t\t\t\t\t{throws.map((t, i) => (\n\t\t\t\t\t\t<ThrowInput\n\t\t\t\t\t\t\tkey={t.id}\n\t\t\t\t\t\t\tthrow={t}\n\t\t\t\t\t\t\tonThrowChange={(newThrow) =>\n\t\t\t\t\t\t\t\thandleThrowChange(i, newThrow)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}