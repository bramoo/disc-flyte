{"version":3,"sources":["components/InlineNumberInput/InlineNumberInput.jsx","components/SelectInput/SelectInput.jsx","simulation/util.js","simulation/disc.js","simulation/discs.js","components/ThrowInput/ThrowInput.jsx","components/ViewBox/ViewBox.jsx","simulation/transform.js","simulation/simulate.js","App.js","reportWebVitals.js","index.js"],"names":["InlineNumberInput","props","id","uniqueId","htmlFor","label","name","type","value","onChange","event","SelectInput","children","interp","x","xp","yp","Array","isArray","map","a","b","length","vec3","y","z","THREE","Disc","this","aoarange","cl","cd","cm","jxy","jz","diam","aoa","aviar","wraith","discs","ThrowInput","useState","open","setOpen","handleChange","e","target","t","throw","onThrowChange","className","onClick","disc","index","mass","speed","spin","direction","launchAngle","noseAngle","rollAngle","ViewBox","vertices","result","pos_g","filter","v","reduce","p","concat","camera","position","OrbitControls","color","decay","Line","points","rotation","Math","PI","args","Transform","angles","phi","theta","psi","cosPhi","cos","cosTheta","cosPsi","sinPhi","sin","sinTheta","sinPsi","set","beta","alpha","dt","arraySize","maxSteps","huckit","roll_angle","nose_angle","launch_angle","launch_height","step","vel_g","acl_g","ori_g","rot_g","acl_d","vel_d","rot_d","acl_s","vel_s","rot_s","acl_w","vel_w","drag","lift","mom","launch_angle_d","applyMatrix3","T","groundDisc","add","ixy","iz","area","weight","ii","clone","atan2","discSlip","slipWind","grav_w","getCd","getCl","getCm","windSlip","slipDisc","discGround","avg_acl_g","multiplyScalar","avg_rot_g","App","throws","simulate","state","params","setState","i","handleThrowChange","bind","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebdb3a5e.chunk.js","sourcesContent":["import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport \"./InlineNumberInput.css\";\n\nexport function InlineNumberInput(props) {\n\tconst id = uniqueId();\n\tconst handleChange = (event) => props.onChange(event);\n\n\treturn (\n\t\t<div>\n\t\t\t<label htmlFor={id}>{props.label}</label>\n\t\t\t<input\n\t\t\t\tid={id}\n\t\t\t\tname={props.name}\n\t\t\t\ttype=\"number\"\n\t\t\t\tvalue={props.value}\n\t\t\t\tonChange={handleChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport \"./SelectInput.css\";\n\nexport function SelectInput(props) {\n\tconst id = uniqueId();\n\tconst handleChange = (event) => props.onChange(event);\n\n\treturn (\n\t\t<div>\n\t\t\t<label htmlFor={id}>{props.label}</label>\n\t\t\t<select\n\t\t\t\tid={id}\n\t\t\t\tname={props.name}\n\t\t\t\tvalue={props.value}\n\t\t\t\tonChange={handleChange}\n\t\t\t>\n\t\t\t\t{props.children}\n\t\t\t</select>\n\t\t</div>\n\t);\n}\n","import * as THREE from 'three';\n\n/**\n * Piecewise linear interpolation of the y value at x, given x and y\n * coordinates defining points on the piecewise line\n * @param {number} x x coordinate to interpolate y value\n * @param {Array} xp x coordinates\n * @param {Array} yp y coordinates\n * @returns {number}\n */\nexport function interp(x, xp, yp) {\n    if (Array.isArray(x)) return x.map(value => interp(value, xp, yp));\n    if (x < xp[0]) return yp[0];\n    let a = 0, b = 1;\n    for (; a < xp.length - 1; a++, b++) {\n        if (xp[a + 1] > x) {\n            return (yp[a] * (xp[b] - x) + yp[b] * (x - xp[a])) / (xp[b] - xp[a]);\n        }\n    }\n    return yp[yp.length - 1];\n}\n\nexport function vec3(x, y, z) {\n    return new THREE.Vector3(x, y, z);\n}\n\nexport function mat3(a1, a2, a3, b1, b2, b3, c1, c2, c3) {\n    return new THREE.Matrix3().set(a1, a2, a3, b1, b2, b3, c1, c2, c3);\n}","import { interp } from './util';\n\nexport default class Disc {\n    constructor(name) {\n      this.name = name;\n      this.aoarange = [0]; // Angle of Attact at which the aerodynamic coefficients have been measured. Must be sorted in ascending order\n      this.cl = [0]; // Coefficients of lift for each AoA\n      this.cd = [0]; // Coefficients of drag for each AoA\n      this.cm = [0]; // Coefficients of pitching moment for each AoA\n      this.jxy = 0; // Normalized mass moment of inertia about the roll/pitch axis in m^2\n      this.jz = 0; // Normalized mass moment of inertia about the spin axis in m^2\n      this.diam = 0; // Disc diameter in m\n    }\n    \n    getCl(aoa) {\n      return interp(aoa, this.aoarange, this.cl);\n    }\n    \n    getCd(aoa) {\n      return interp(aoa, this.aoarange, this.cd);\n    }\n    \n    getCm(aoa) {\n      return interp(aoa, this.aoarange, this.cm);\n    }\n  }","import Disc from './disc';\n\nexport const aviar = new Disc(\"Aviar\");\naviar.aoarange = [-1.570796327, -0.5235987756, -0.0872664626, -0.06981317008, -0.05235987756, -0.03490658504, -0.01745329252, 0, 0.01745329252, 0.03490658504, 0.05235987756, 0.06981317008, 0.0872664626, 0.1047197551, 0.1221730476, 0.1396263402, 0.1570796327, 0.1745329252, 0.1919862177, 0.2094395102, 0.2268928028, 0.2443460953, 0.2617993878, 0.7853981634, 0.872664626, 1.570796327];\naviar.cl = [0, -1, -0.088, -0.049, -0.009, 0.034, 0.093, 0.154, 0.21, 0.256, 0.304, 0.343, 0.383, 0.426, 0.468, 0.508, 0.549, 0.591, 0.631, 0.672, 0.702, 0.74, 0.78, 1.6, 0.8, 0];\naviar.cd = [0.4, 0.188, 0.076, 0.071, 0.07, 0.072, 0.072, 0.084, 0.088, 0.085, 0.102, 0.117, 0.133, 0.141, 0.157, 0.174, 0.189, 0.203, 0.216, 0.226, 0.245, 0.266, 0.281, 0.7, 0.5, 0.6];\naviar.cm = [0, -0.08, -0.015, -0.016, -0.011, -0.01, -0.013, -0.018, -0.018, -0.017, -0.014, -0.014, -0.011, -0.008, -0.005, 0, 0.005, 0.009, 0.011, 0.02, 0.024, 0.032, 0.039, 0.23, 0.02, 0];\naviar.jxy = 4.23e-3;\naviar.jz = 8.46e-3;\naviar.diam = 0.21;\n\n// Placeholder data, just a copy of Aviar for now\nexport const wraith = new Disc(\"Wraith\");\nwraith.aoarange = [-1.570796327, -0.5235987756, -0.0872664626, -0.06981317008, -0.05235987756, -0.03490658504, -0.01745329252, 0, 0.01745329252, 0.03490658504, 0.05235987756, 0.06981317008, 0.0872664626, 0.1047197551, 0.1221730476, 0.1396263402, 0.1570796327, 0.1745329252, 0.1919862177, 0.2094395102, 0.2268928028, 0.2443460953, 0.2617993878, 0.7853981634, 0.872664626, 1.570796327];\nwraith.cl = [0, -1, -0.088, -0.049, -0.009, 0.034, 0.093, 0.154, 0.21, 0.256, 0.304, 0.343, 0.383, 0.426, 0.468, 0.508, 0.549, 0.591, 0.631, 0.672, 0.702, 0.74, 0.78, 1.6, 0.8, 0];\nwraith.cd = [0.4, 0.188, 0.076, 0.071, 0.07, 0.072, 0.072, 0.084, 0.088, 0.085, 0.102, 0.117, 0.133, 0.141, 0.157, 0.174, 0.189, 0.203, 0.216, 0.226, 0.245, 0.266, 0.281, 0.7, 0.5, 0.6];\nwraith.cm = [0, -0.08, -0.015, -0.016, -0.011, -0.01, -0.013, -0.018, -0.018, -0.017, -0.014, -0.014, -0.011, -0.008, -0.005, 0, 0.005, 0.009, 0.011, 0.02, 0.024, 0.032, 0.039, 0.23, 0.02, 0];\nwraith.jxy = 4.23e-3;\nwraith.jz = 8.46e-3;\nwraith.diam = 0.21;\n\nexport const discs = [aviar, wraith];","import React, { useState } from \"react\";\nimport { InlineNumberInput } from \"../InlineNumberInput/InlineNumberInput\";\nimport { SelectInput } from \"../SelectInput/SelectInput\";\nimport { discs } from \"../../simulation/discs\";\nimport \"./ThrowInput.css\";\n\nexport function ThrowInput(props) {\n\tconst [open, setOpen] = useState(false);\n\n\tconst handleChange = (e) => {\n\t\tlet target = e.target.name;\n\t\tlet t = props.throw;\n\t\tt[target] = e.target.value;\n\t\tprops.onThrowChange(t);\n\t};\n\n\tconst t = props.throw;\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<header onClick={() => setOpen(!open)}>\n\t\t\t\t<span className=\"heading\">{discs[t.disc].name}</span>\n\t\t\t</header>\n\n\t\t\t{open && (\n\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlabel=\"Disc\"\n\t\t\t\t\t\tname=\"disc\"\n\t\t\t\t\t\tvalue={t.disc}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t>\n\t\t\t\t\t\t{discs.map((disc, index) => (\n\t\t\t\t\t\t\t<option value={index}>{disc.name}</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</SelectInput>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Mass (g)\"\n\t\t\t\t\t\tname=\"mass\"\n\t\t\t\t\t\tvalue={t.mass}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Speed (mph)\"\n\t\t\t\t\t\tname=\"speed\"\n\t\t\t\t\t\tvalue={t.speed}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Spin (rev/s)\"\n\t\t\t\t\t\tname=\"spin\"\n\t\t\t\t\t\tvalue={t.spin}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlabel=\"Dir.\"\n\t\t\t\t\t\tname=\"direction\"\n\t\t\t\t\t\tvalue={t.direction}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"1\">Clockwise (RHBH/LHFH)</option>\n\t\t\t\t\t\t<option value=\"-1\">Anti-Clockwise (LHBH/RHFH)</option>\n\t\t\t\t\t</SelectInput>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Launch Angle (deg)\"\n\t\t\t\t\t\tname=\"launchAngle\"\n\t\t\t\t\t\tvalue={t.launchAngle}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Nose Angle (deg)\"\n\t\t\t\t\t\tname=\"noseAngle\"\n\t\t\t\t\t\tvalue={t.noseAngle}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Roll Angle (deg)\"\n\t\t\t\t\t\tname=\"rollAngle\"\n\t\t\t\t\t\tvalue={t.rollAngle}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { Line, OrbitControls } from \"@react-three/drei\";\nimport { vec3 } from \"../../simulation/util\";\nimport \"./ViewBox.css\";\n\nexport function ViewBox(props) {\n\tlet vertices = [0, 0, 0];\n\tif (props.result) {\n\t\tlet points = props.result.pos_g\n\t\t\t.filter((v) => !!v)\n\t\t\t.map((v) => vec3(v.x, v.y, v.z));\n\t\tvertices = points.reduce((a, p) => a.concat([p.y, p.z, p.x]), []);\n\t}\n\n\tconst width = 10;\n\tconst length = 70;\n\n\treturn (\n\t\t<Canvas camera={{ position: [0, 0, -5] }}>\n\t\t\t<axesHelper />\n\t\t\t<OrbitControls />\n\n\t\t\t<ambientLight color={0x404040} />\n\t\t\t<pointLight position={[0, 20, 25]} decay={2} />\n\n\t\t\t<Line color=\"red\" points={vertices} />\n\n\t\t\t<mesh position={[0, 0, length / 2]} rotation={[-Math.PI / 2, 0, 0]}>\n\t\t\t\t<planeGeometry args={[width, length]} />\n\t\t\t\t<meshStandardMaterial color=\"#00aa00\" />\n\t\t\t</mesh>\n\t\t</Canvas>\n\t);\n}\n","import * as THREE from 'three';\n\nexport default class Transform {\n    static groundDisc(angles) {\n      const phi = angles.x;\n      const theta = angles.y;\n      const psi = angles.z;\n      \n      const cosPhi = Math.cos(phi);\n      const cosTheta = Math.cos(theta);\n      const cosPsi = Math.cos(psi);\n  \n      const sinPhi = Math.sin(phi);\n      const sinTheta = Math.sin(theta);\n      const sinPsi = Math.sin(psi);\n      \n      return new THREE.Matrix3().set(\n        cosTheta*cosPsi,  sinPhi*sinTheta*cosPsi - cosPhi*sinPsi,   cosPhi*sinTheta*cosPsi + sinPhi*sinPhi,\n        cosTheta*sinPsi,  sinPhi*sinTheta*sinPsi + cosPhi*cosPsi,   cosPhi*sinTheta*sinPsi - sinPhi*cosPsi,\n        -sinTheta,        sinPhi*cosTheta,                          cosPhi*cosTheta\n      );\n    }\n    \n    static discGround(angles) {\n      const phi = angles.x;\n      const theta = angles.y;\n      const psi = angles.z;\n  \n      const cosPhi = Math.cos(phi);\n      const cosTheta = Math.cos(theta);\n      const cosPsi = Math.cos(psi);\n  \n      const sinPhi = Math.sin(phi);\n      const sinTheta = Math.sin(theta);\n      const sinPsi = Math.sin(psi);\n  \n      return new THREE.Matrix3().set(\n        cosTheta*cosPsi,                         cosTheta*sinPsi,                         -sinTheta,\n        sinPhi*sinTheta*cosPsi - cosPhi*sinPsi,  sinPhi*sinTheta*sinPsi + cosPhi*cosPsi,  sinPhi*cosTheta,\n        cosPhi*sinTheta*cosPsi + sinPhi*sinPsi,  cosPhi*sinTheta*sinPsi - sinPhi*cosPsi,  cosPhi*cosTheta\n      );\n    }\n    \n    static discSlip(beta) {\n      const cos = Math.cos(beta);\n      const sin = Math.sin(beta);\n      \n      return new THREE.Matrix3().set(\n        cos, -sin, 0,\n        sin, cos,  0,\n        0,   0,    1\n      );\n    }\n    \n    static slipDisc(beta) {\n      const cos = Math.cos(beta);\n      const sin = Math.sin(beta);\n      \n      return new THREE.Matrix3().set(\n        cos, sin, 0,\n        -sin, cos,  0,\n        0,   0,    1\n      );\n    }\n    \n    static slipWind(alpha) {\n      const cos = Math.cos(alpha);\n      const sin = Math.sin(alpha);\n      \n      return new THREE.Matrix3().set(\n        cos, 0,  -sin,\n        0,   1,  0,\n        sin, 0,  cos\n      );\n    }\n    \n    static windSlip(alpha) {\n      const cos = Math.cos(alpha);\n      const sin = Math.sin(alpha);\n      \n      return new THREE.Matrix3().set(\n        cos, 0,  sin,\n        0,   1,  0,\n        -sin, 0,  cos\n      );\n    }\n  }","import T from \"./transform\";\nimport { vec3 } from \"./util\";\n\nconst rho = 1.18; // Air density in kg/m^3\nconst g = 9.81; // Gravitational acceleration in m/s^2\n\nconst dt = 0.01; // Timestep in seconds\nconst maxSteps = 1000;\nconst arraySize = maxSteps + 1;\n\n/**\n * Simulates a disc and throw based on the method in _Simulation of a\n * spin stabilized sports disc_, Crowther and Potts (2007)\n * and [HuckIt](https://colab.research.google.com/drive/1fwoivf9S6tro1A23yEetisPgexmhfjIK?usp=sharing#scrollTo=PwVmextgTsy7)\n * @typedef { import(\"./disc.js\").default } Disc\n * @param {Disc} disc disc to simulate\n * @param {number} roll_angle in radians\n * @param {number} nose_angle in radians\n * @param {number} launch_angle in radians\n * @param {number} launch_height in metres\n * @param {number} speed in metres per second\n * @param {number} spin in radians per second\n * @param {number} mass in grams\n */\nexport default function huckit(\n  disc,\n  roll_angle,\n  nose_angle,\n  launch_angle,\n  launch_height,\n  speed,\n  spin,\n  mass\n) {\n  // Simulation controls\n  let step = 0; // Current step\n  let t = new Array(arraySize);\n\n  // Ground coordinate system\n  let pos_g = new Array(arraySize); // Disc position in m\n  let vel_g = new Array(arraySize); // Disc velocity in m/s\n  let acl_g = new Array(arraySize); // Disc acceleration in m/s^2\n  let ori_g = new Array(arraySize); // Disc roll, pitch, and yaw in rad\n  let rot_g = new Array(arraySize); // Disc roll, pitch, and yaw rate in rad/s\n\n  // Disc coordinate system\n  let acl_d = new Array(arraySize);\n  let vel_d = new Array(arraySize);\n  let rot_d = new Array(arraySize);\n\n  // Side-slip coordinate system\n  let acl_s = new Array(arraySize);\n  let vel_s = new Array(arraySize);\n  let rot_s = new Array(arraySize);\n  let beta = new Array(arraySize);\n\n  // Wind coordinate system\n  let acl_w = new Array(arraySize);\n  let vel_w = new Array(arraySize);\n  let alpha = new Array(arraySize);\n\n  // Aerodynamic forces\n  let drag = new Array(arraySize);\n  let lift = new Array(arraySize);\n  let mom = new Array(arraySize);\n\n  // Define disc orientation and velocity from inputs\n  ori_g[step] = vec3(roll_angle, nose_angle, 0);\n  vel_g[step] = vec3(\n    speed * Math.cos(launch_angle),\n    0,\n    speed * Math.sin(launch_angle)\n  );\n  let launch_angle_d = vec3(0, launch_angle, 0).applyMatrix3(\n    T.groundDisc(ori_g[step])\n  );\n  ori_g[step].add(launch_angle_d);\n\n  // Define environmental constants\n  pos_g[step] = vec3(0, 0, launch_height);\n\n  // Define derived constants\n  const diam = disc.diam;\n  const ixy = disc.jxy * mass; // Moment of inertia of disc about roll axis in kg-m^2\n  const iz = disc.jz * mass; // Moment of inertia of disc about spin agis in kg-m^2\n  const area = Math.PI * (0.5 * diam) ** 2; // Area of disc in m^2\n  const weight = g * mass; // Gravitational force acting on the disc centre of mass in N\n\n  // Loop until disc hits the ground, z-position=0\n  while (pos_g[step].z > 0) {\n    if (step >= maxSteps) break;\n\n    let ii = 0;\n    while (true) {\n      // Transform ground velocity to wind coordinate system\n      vel_d[step] = vel_g[step].clone().applyMatrix3(T.groundDisc(ori_g[step])); // Transform ground velocity to disc coordinate system\n      beta[step] = -Math.atan2(vel_d[step].y, vel_d[step].x); // Calculate side slip angle\n      vel_s[step] = vel_d[step].clone().applyMatrix3(T.discSlip(beta[step])); // Transform velocity to zero side slip coordinate system\n      alpha[step] = -Math.atan2(vel_s[step].z, vel_s[step].x); // Calculate angle of attack\n      vel_w[step] = vel_s[step].clone().applyMatrix3(T.slipWind(alpha[step])); // Transform velocity to wind coordinate system where aerodynamic calculations can be made\n\n      // Transform gravity loads to wind coordinate system\n      const grav_d = vec3(0, 0, -weight).applyMatrix3(\n        T.groundDisc(ori_g[step])\n      );\n      const grav_s = grav_d.clone().applyMatrix3(T.discSlip(beta[step]));\n      const grav_w = grav_s.clone().applyMatrix3(T.slipWind(alpha[step]));\n\n      // Calculate aerodynamic forces on the disc\n      drag[step] =\n        0.5 * rho * vel_w[step].x ** 2 * area * disc.getCd(alpha[step]); // Drag force in N\n      lift[step] =\n        0.5 * rho * vel_w[step].x ** 2 * area * disc.getCl(alpha[step]); // Lift force in N\n      mom[step] =\n        0.5 * rho * vel_w[step].x ** 2 * area * diam * disc.getCm(alpha[step]); // Calculate pitching moment in N-m\n\n      // Calculate body accelerations from second law and force balances\n      acl_w[step] = vec3();\n      rot_s[step] = vec3();\n      acl_w[step].x = (grav_w.x - drag[step]) / mass; // Acceleration due to drag\n      acl_w[step].z = (grav_w.z + lift[step]) / mass; // Acceleration due to lift\n      acl_w[step].y = grav_w.y / mass; // Acceleration due to side loading\n      rot_s[step].x = -mom[step] / (spin * (ixy - iz)); // Roll rate from pitching moment\n\n      // Transform disc acceleration to ground coordinate system\n      acl_s[step] = acl_w[step].clone().applyMatrix3(T.windSlip(alpha[step]));\n      acl_d[step] = acl_s[step].clone().applyMatrix3(T.slipDisc(beta[step]));\n      acl_g[step] = acl_d[step].clone().applyMatrix3(T.discGround(ori_g[step]));\n\n      // Transform roll rate from zero side-slip to ground coordinate system\n      rot_d[step] = rot_s[step].clone().applyMatrix3(T.slipDisc(beta[step]));\n      rot_g[step] = rot_d[step].clone().applyMatrix3(T.discGround(ori_g[step]));\n\n      // Perform one inner iteration to refine speed and position vectors\n      if (step === 0) break; // Do not run inner iterations for initial time step\n      if (ii >= 1) break; // Only run one inner iteration\n\n      // Calculate average accelerations and rotation rates between current and previous time steps\n      const avg_acl_g = acl_g[step - 1]\n        .clone()\n        .add(acl_g[step])\n        .multiplyScalar(0.5);\n      const avg_rot_g = rot_g[step - 1]\n        .clone()\n        .add(rot_g[step])\n        .multiplyScalar(0.5);\n\n      // Calculate new velocity, position, and orientation for current time step\n      vel_g[step] = vel_g[step - 1]\n        .clone()\n        .add(avg_acl_g.clone().multiplyScalar(dt));\n      pos_g[step] = pos_g[step - 1]\n        .clone()\n        .add(vel_g[step - 1].clone().multiplyScalar(dt))\n        .add(avg_acl_g.clone().multiplyScalar(0.5 * dt ** 2));\n      ori_g[step] = ori_g[step - 1]\n        .clone()\n        .add(avg_rot_g.clone().multiplyScalar(dt));\n\n      ii++;\n    }\n\n    // Estimate disc velocity, position, and orientation at next time step\n    vel_g[step + 1] = vel_g[step]\n      .clone()\n      .add(acl_g[step].clone().multiplyScalar(dt));\n    pos_g[step + 1] = pos_g[step]\n      .clone()\n      .add(vel_g[step].clone().multiplyScalar(dt))\n      .add(acl_g[step].clone().multiplyScalar(0.5 * dt ** 2));\n    ori_g[step + 1] = ori_g[step]\n      .clone()\n      .add(rot_g[step].clone().multiplyScalar(dt));\n\n    // Update simulation variables\n    t[step + 1] = t[step] + dt;\n    step++;\n  }\n\n  return {\n    t,\n    lift,\n    drag,\n    mom,\n    alpha,\n    beta,\n    pos_g,\n    vel_g,\n    acl_g,\n    ori_g,\n    rot_g,\n    vel_d,\n    vel_w,\n    acl_w,\n    rot_s,\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { ThrowInput } from \"./components/ThrowInput/ThrowInput\";\nimport { ViewBox } from \"./components/ViewBox/ViewBox\";\nimport { discs } from \"./simulation/discs\";\nimport huckit from \"./simulation/simulate.js\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    let throws = [\n      {\n        disc: 0, // aviar\n        mass: 175,\n        speed: 50,\n        spin: 27,\n        direction: 1,\n        launchAngle: 10,\n        noseAngle: 4,\n        rollAngle: 8,\n      },\n      {\n        disc: 1,\n        mass: 170,\n        speed: 30,\n        spin: 20,\n        direction: 1,\n        launchAngle: 8,\n        noseAngle: 6,\n        rollAngle: 0,\n      },\n    ];\n    let result = this.simulate(throws[0]);\n    this.state = {\n      throws: throws,\n      result: result,\n    };\n  }\n\n  simulate(t) {\n    let params = [\n      (t.rollAngle * Math.PI) / 180.0,\n      (t.noseAngle * Math.PI) / 180.0,\n      (t.launchAngle * Math.PI) / 180.0,\n      1.8,\n      t.speed * 0.44704,\n      t.spin * t.direction * 2 * Math.PI,\n      t.mass / 1000,\n    ];\n    return huckit(discs[t.disc], ...params);\n  }\n\n  handleThrowChange(index, t) {\n    let result = this.simulate(t);\n    this.setState({ result: result });\n\n    let throws = [...this.state.throws];\n    throws[index] = t;\n    this.setState({ throws: throws });\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <div className=\"throw-container\">\n          <h2 className=\"throw-header\">Throws</h2>\n\n          <div className=\"throw-list\">\n            {this.state.throws.map((t, i) => (\n              <ThrowInput\n                key={i}\n                throw={t}\n                onThrowChange={this.handleThrowChange.bind(this, i)}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"view-container\">\n          <ViewBox result={this.state.result}></ViewBox>\n        </div>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}