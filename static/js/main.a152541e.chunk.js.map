{"version":3,"sources":["components/InlineNumberInput/InlineNumberInput.jsx","components/SelectInput/SelectInput.jsx","simulation/util.js","simulation/disc.js","simulation/discs.js","components/ThrowInput/ThrowInput.jsx","components/ViewBox/ViewBox.jsx","simulation/transform.js","simulation/simulate.js","App.js","reportWebVitals.js","index.js"],"names":["InlineNumberInput","props","id","uniqueId","handleChange","bind","event","this","onChange","target","value","htmlFor","label","type","React","Component","SelectInput","children","interp","x","xp","yp","Array","isArray","map","a","b","length","vec3","y","z","THREE","Disc","name","aoarange","cl","cd","cm","jxy","jz","diam","aoa","aviar","wraith","discs","ThrowInput","state","open","handleDiscChange","handleMassChange","handleSpeedChange","handleSpinChange","handleDirectionChange","handleLaunchAngleChange","handleNoseAngleChange","handleRollAngleChange","setState","disc","t","throw","onThrowChange","mass","speed","spin","direction","launchAngle","noseAngle","rollAngle","className","onClick","toggleOpen","index","ViewBox","vertices","Float32Array","count","result","points","pos_g","filter","v","reduce","p","concat","OrbitControls","enablePan","color","linewidth","attachObject","array","itemSize","Transform","angles","phi","theta","psi","cosPhi","Math","cos","cosTheta","cosPsi","sinPhi","sin","sinTheta","sinPsi","set","beta","alpha","dt","arraySize","maxSteps","huckit","roll_angle","nose_angle","launch_angle","launch_height","step","vel_g","acl_g","ori_g","rot_g","acl_d","vel_d","rot_d","acl_s","vel_s","rot_s","acl_w","vel_w","drag","lift","mom","launch_angle_d","applyMatrix3","T","groundDisc","add","ixy","iz","area","PI","weight","ii","clone","atan2","discSlip","slipWind","grav_w","getCd","getCl","getCm","windSlip","slipDisc","discGround","avg_acl_g","multiplyScalar","avg_rot_g","App","throws","handleThrowChange","params","res","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a152541e.chunk.js","sourcesContent":["import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport \"./InlineNumberInput.css\";\n\nexport class InlineNumberInput extends React.Component {\n  id;\n\n  constructor(props) {\n    super(props);\n    this.id = uniqueId();\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div>\n        <label htmlFor={this.id}>{this.props.label}</label>\n        <input id={this.id} type=\"number\" value={this.props.value} onChange={this.handleChange} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport \"./SelectInput.css\";\n\nexport class SelectInput extends React.Component {\n  id;\n\n  constructor(props) {\n    super(props);\n    this.id = uniqueId();\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div>\n        <label htmlFor={this.id}>{this.props.label}</label>\n        <select\n          id={this.id}\n          value={this.props.value}\n          onChange={this.handleChange}\n        >\n          {this.props.children}\n        </select>\n      </div>\n    );\n  }\n}\n","import * as THREE from 'three';\n\n/**\n * Piecewise linear interpolation of the y value at x, given x and y\n * coordinates defining points on the piecewise line\n * @param {number} x x coordinate to interpolate y value\n * @param {Array} xp x coordinates\n * @param {Array} yp y coordinates\n * @returns {number}\n */\nexport function interp(x, xp, yp) {\n    if (Array.isArray(x)) return x.map(value => interp(value, xp, yp));\n    if (x < xp[0]) return yp[0];\n    let a = 0, b = 1;\n    for (; a < xp.length - 1; a++, b++) {\n        if (xp[a + 1] > x) {\n            return (yp[a] * (xp[b] - x) + yp[b] * (x - xp[a])) / (xp[b] - xp[a]);\n        }\n    }\n    return yp[yp.length - 1];\n}\n\nexport function vec3(x, y, z) {\n    return new THREE.Vector3(x, y, z);\n}\n\nexport function mat3(a1, a2, a3, b1, b2, b3, c1, c2, c3) {\n    return new THREE.Matrix3().set(a1, a2, a3, b1, b2, b3, c1, c2, c3);\n}","import { interp } from './util';\n\nexport default class Disc {\n    constructor(name) {\n      this.name = name;\n      this.aoarange = [0]; // Angle of Attact at which the aerodynamic coefficients have been measured. Must be sorted in ascending order\n      this.cl = [0]; // Coefficients of lift for each AoA\n      this.cd = [0]; // Coefficients of drag for each AoA\n      this.cm = [0]; // Coefficients of pitching moment for each AoA\n      this.jxy = 0; // Normalized mass moment of inertia about the roll/pitch axis in m^2\n      this.jz = 0; // Normalized mass moment of inertia about the spin axis in m^2\n      this.diam = 0; // Disc diameter in m\n    }\n    \n    getCl(aoa) {\n      return interp(aoa, this.aoarange, this.cl);\n    }\n    \n    getCd(aoa) {\n      return interp(aoa, this.aoarange, this.cd);\n    }\n    \n    getCm(aoa) {\n      return interp(aoa, this.aoarange, this.cm);\n    }\n  }","import Disc from './disc';\n\nexport const aviar = new Disc(\"Aviar\");\naviar.aoarange = [-1.570796327, -0.5235987756, -0.0872664626, -0.06981317008, -0.05235987756, -0.03490658504, -0.01745329252, 0, 0.01745329252, 0.03490658504, 0.05235987756, 0.06981317008, 0.0872664626, 0.1047197551, 0.1221730476, 0.1396263402, 0.1570796327, 0.1745329252, 0.1919862177, 0.2094395102, 0.2268928028, 0.2443460953, 0.2617993878, 0.7853981634, 0.872664626, 1.570796327];\naviar.cl = [0, -1, -0.088, -0.049, -0.009, 0.034, 0.093, 0.154, 0.21, 0.256, 0.304, 0.343, 0.383, 0.426, 0.468, 0.508, 0.549, 0.591, 0.631, 0.672, 0.702, 0.74, 0.78, 1.6, 0.8, 0];\naviar.cd = [0.4, 0.188, 0.076, 0.071, 0.07, 0.072, 0.072, 0.084, 0.088, 0.085, 0.102, 0.117, 0.133, 0.141, 0.157, 0.174, 0.189, 0.203, 0.216, 0.226, 0.245, 0.266, 0.281, 0.7, 0.5, 0.6];\naviar.cm = [0, -0.08, -0.015, -0.016, -0.011, -0.01, -0.013, -0.018, -0.018, -0.017, -0.014, -0.014, -0.011, -0.008, -0.005, 0, 0.005, 0.009, 0.011, 0.02, 0.024, 0.032, 0.039, 0.23, 0.02, 0];\naviar.jxy = 4.23e-3;\naviar.jz = 8.46e-3;\naviar.diam = 0.21;\n\n// Placeholder data, just a copy of Aviar for now\nexport const wraith = new Disc(\"Wraith\");\nwraith.aoarange = [-1.570796327, -0.5235987756, -0.0872664626, -0.06981317008, -0.05235987756, -0.03490658504, -0.01745329252, 0, 0.01745329252, 0.03490658504, 0.05235987756, 0.06981317008, 0.0872664626, 0.1047197551, 0.1221730476, 0.1396263402, 0.1570796327, 0.1745329252, 0.1919862177, 0.2094395102, 0.2268928028, 0.2443460953, 0.2617993878, 0.7853981634, 0.872664626, 1.570796327];\nwraith.cl = [0, -1, -0.088, -0.049, -0.009, 0.034, 0.093, 0.154, 0.21, 0.256, 0.304, 0.343, 0.383, 0.426, 0.468, 0.508, 0.549, 0.591, 0.631, 0.672, 0.702, 0.74, 0.78, 1.6, 0.8, 0];\nwraith.cd = [0.4, 0.188, 0.076, 0.071, 0.07, 0.072, 0.072, 0.084, 0.088, 0.085, 0.102, 0.117, 0.133, 0.141, 0.157, 0.174, 0.189, 0.203, 0.216, 0.226, 0.245, 0.266, 0.281, 0.7, 0.5, 0.6];\nwraith.cm = [0, -0.08, -0.015, -0.016, -0.011, -0.01, -0.013, -0.018, -0.018, -0.017, -0.014, -0.014, -0.011, -0.008, -0.005, 0, 0.005, 0.009, 0.011, 0.02, 0.024, 0.032, 0.039, 0.23, 0.02, 0];\nwraith.jxy = 4.23e-3;\nwraith.jz = 8.46e-3;\nwraith.diam = 0.21;\n\nexport const discs = [aviar, wraith];","import React from \"react\";\nimport { InlineNumberInput } from \"../InlineNumberInput/InlineNumberInput\";\nimport { SelectInput } from \"../SelectInput/SelectInput\";\nimport { discs } from \"../../simulation/discs\";\nimport \"./ThrowInput.css\";\n\nexport class ThrowInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    };\n\n    this.handleDiscChange = this.handleDiscChange.bind(this);\n    this.handleMassChange = this.handleMassChange.bind(this);\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\n    this.handleSpinChange = this.handleSpinChange.bind(this);\n    this.handleDirectionChange = this.handleDirectionChange.bind(this);\n    this.handleLaunchAngleChange = this.handleLaunchAngleChange.bind(this);\n    this.handleNoseAngleChange = this.handleNoseAngleChange.bind(this);\n    this.handleRollAngleChange = this.handleRollAngleChange.bind(this);\n  }\n\n  toggleOpen() {\n    const open = this.state.open;\n    this.setState({\n      open: !open,\n    });\n  }\n\n  handleDiscChange(disc) {\n    let t = this.props.throw;\n    t.disc = disc;\n    this.props.onThrowChange(t);\n  }\n\n  handleMassChange(mass) {\n    let t = this.props.throw;\n    t.mass = mass;\n    this.props.onThrowChange(t);\n  }\n\n  handleSpeedChange(speed) {\n    let t = this.props.throw;\n    t.speed = speed;\n    this.props.onThrowChange(t);\n  }\n\n  handleSpinChange(spin) {\n    let t = this.props.throw;\n    t.spin = spin;\n    this.props.onThrowChange(t);\n  }\n\n  handleDirectionChange(direction) {\n    let t = this.props.throw;\n    t.direction = direction;\n    this.props.onThrowChange(t);\n  }\n\n  handleLaunchAngleChange(launchAngle) {\n    let t = this.props.throw;\n    t.launchAngle = launchAngle;\n    this.props.onThrowChange(t);\n  }\n\n  handleNoseAngleChange(noseAngle) {\n    let t = this.props.throw;\n    t.noseAngle = noseAngle;\n    this.props.onThrowChange(t);\n  }\n\n  handleRollAngleChange(rollAngle) {\n    let t = this.props.throw;\n    t.rollAngle = rollAngle;\n    this.props.onThrowChange(t);\n  }\n\n  render() {\n    const t = this.props.throw;\n    return (\n      <div className=\"container\">\n        <header onClick={() => this.toggleOpen()}>\n          <span className=\"heading\">{discs[t.disc].name}</span>\n        </header>\n\n        {this.state.open && (\n          <div className=\"inputs\">\n            <SelectInput\n              label=\"Disc\"\n              value={t.disc}\n              onChange={this.handleDiscChange}\n            >\n              {discs.map((disc, index) => (\n                <option value={index}>{disc.name}</option>\n              ))}\n            </SelectInput>\n            <InlineNumberInput\n              label=\"Mass (g)\"\n              value={t.mass}\n              onChange={this.handleMassChange}\n            />\n            <InlineNumberInput\n              label=\"Speed (mph)\"\n              value={t.speed}\n              onChange={this.handleSpeedChange}\n            />\n            <InlineNumberInput\n              label=\"Spin (rev/s)\"\n              value={t.spin}\n              onChange={this.handleSpinChange}\n            />\n            <SelectInput\n              label=\"Dir.\"\n              value={t.direction}\n              onChange={this.handleDirectionChange}\n            >\n              <option value=\"1\">Clockwise (RHBH/LHFH)</option>\n              <option value=\"-1\">Anti-Clockwise (LHBH/RHFH)</option>\n            </SelectInput>\n            <InlineNumberInput\n              label=\"Launch Angle (deg)\"\n              value={t.launchAngle}\n              onChange={this.handleLaunchAngleChange}\n            />\n            <InlineNumberInput\n              label=\"Nose Angle (deg)\"\n              value={t.noseAngle}\n              onChange={this.handleNoseAngleChange}\n            />\n            <InlineNumberInput\n              label=\"Roll Angle (deg)\"\n              value={t.rollAngle}\n              onChange={this.handleRollAngleChange}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport \"./ViewBox.css\";\nimport { vec3 } from \"../../simulation/util\";\n\nexport class ViewBox extends React.Component {\n  render() {\n    let vertices = new Float32Array();\n    let count = 0;\n    if(this.props.result) {\n        let points = this.props.result.pos_g.filter((v) => !!v).map((v) => vec3(v.x, v.y, v.z));\n        vertices = new Float32Array(\n          points.reduce((a, p) => a.concat([p.x, p.y, p.z]), [])\n        );\n        count = points.length;\n    }\n\n    return (\n      <div className=\"view-box\">\n        <Canvas>\n          <OrbitControls enablePan={false} />\n\n          <line>\n              <lineBasicMaterial color=\"red\" linewidth={5} />\n            <bufferGeometry>\n              <bufferAttribute\n                attachObject={[\"attributes\", \"position\"]}\n                array={vertices}\n                itemSize={3}\n                count={count}\n              />\n            </bufferGeometry>\n          </line>\n\n          <mesh>\n            <boxGeometry />\n            <meshNormalMaterial />\n          </mesh>\n        </Canvas>\n      </div>\n    );\n  }\n}\n","import * as THREE from 'three';\n\nexport default class Transform {\n    static groundDisc(angles) {\n      const phi = angles.x;\n      const theta = angles.y;\n      const psi = angles.z;\n      \n      const cosPhi = Math.cos(phi);\n      const cosTheta = Math.cos(theta);\n      const cosPsi = Math.cos(psi);\n  \n      const sinPhi = Math.sin(phi);\n      const sinTheta = Math.sin(theta);\n      const sinPsi = Math.sin(psi);\n      \n      return new THREE.Matrix3().set(\n        cosTheta*cosPsi,  sinPhi*sinTheta*cosPsi - cosPhi*sinPsi,   cosPhi*sinTheta*cosPsi + sinPhi*sinPhi,\n        cosTheta*sinPsi,  sinPhi*sinTheta*sinPsi + cosPhi*cosPsi,   cosPhi*sinTheta*sinPsi - sinPhi*cosPsi,\n        -sinTheta,        sinPhi*cosTheta,                          cosPhi*cosTheta\n      );\n    }\n    \n    static discGround(angles) {\n      const phi = angles.x;\n      const theta = angles.y;\n      const psi = angles.z;\n  \n      const cosPhi = Math.cos(phi);\n      const cosTheta = Math.cos(theta);\n      const cosPsi = Math.cos(psi);\n  \n      const sinPhi = Math.sin(phi);\n      const sinTheta = Math.sin(theta);\n      const sinPsi = Math.sin(psi);\n  \n      return new THREE.Matrix3().set(\n        cosTheta*cosPsi,                         cosTheta*sinPsi,                         -sinTheta,\n        sinPhi*sinTheta*cosPsi - cosPhi*sinPsi,  sinPhi*sinTheta*sinPsi + cosPhi*cosPsi,  sinPhi*cosTheta,\n        cosPhi*sinTheta*cosPsi + sinPhi*sinPsi,  cosPhi*sinTheta*sinPsi - sinPhi*cosPsi,  cosPhi*cosTheta\n      );\n    }\n    \n    static discSlip(beta) {\n      const cos = Math.cos(beta);\n      const sin = Math.sin(beta);\n      \n      return new THREE.Matrix3().set(\n        cos, -sin, 0,\n        sin, cos,  0,\n        0,   0,    1\n      );\n    }\n    \n    static slipDisc(beta) {\n      const cos = Math.cos(beta);\n      const sin = Math.sin(beta);\n      \n      return new THREE.Matrix3().set(\n        cos, sin, 0,\n        -sin, cos,  0,\n        0,   0,    1\n      );\n    }\n    \n    static slipWind(alpha) {\n      const cos = Math.cos(alpha);\n      const sin = Math.sin(alpha);\n      \n      return new THREE.Matrix3().set(\n        cos, 0,  -sin,\n        0,   1,  0,\n        sin, 0,  cos\n      );\n    }\n    \n    static windSlip(alpha) {\n      const cos = Math.cos(alpha);\n      const sin = Math.sin(alpha);\n      \n      return new THREE.Matrix3().set(\n        cos, 0,  sin,\n        0,   1,  0,\n        -sin, 0,  cos\n      );\n    }\n  }","import T from \"./transform\";\nimport { vec3 } from \"./util\";\n\nconst rho = 1.18; // Air density in kg/m^3\nconst g = 9.81; // Gravitational acceleration in m/s^2\n\nconst dt = 0.01; // Timestep in seconds\nconst maxSteps = 1000;\nconst arraySize = maxSteps + 1;\n\n/**\n * Simulates a disc and throw based on the method in _Simulation of a\n * spin stabilized sports disc_, Crowther and Potts (2007)\n * and [HuckIt](https://colab.research.google.com/drive/1fwoivf9S6tro1A23yEetisPgexmhfjIK?usp=sharing#scrollTo=PwVmextgTsy7)\n * @typedef { import(\"./disc.js\").default } Disc\n * @param {Disc} disc disc to simulate\n * @param {number} roll_angle in radians\n * @param {number} nose_angle in radians\n * @param {number} launch_angle in radians\n * @param {number} launch_height in metres\n * @param {number} speed in metres per second\n * @param {number} spin in radians per second\n * @param {number} mass in grams\n */\nexport default function huckit(\n  disc,\n  roll_angle,\n  nose_angle,\n  launch_angle,\n  launch_height,\n  speed,\n  spin,\n  mass\n) {\n  // Simulation controls\n  let step = 0; // Current step\n  let t = new Array(arraySize);\n\n  // Ground coordinate system\n  let pos_g = new Array(arraySize); // Disc position in m\n  let vel_g = new Array(arraySize); // Disc velocity in m/s\n  let acl_g = new Array(arraySize); // Disc acceleration in m/s^2\n  let ori_g = new Array(arraySize); // Disc roll, pitch, and yaw in rad\n  let rot_g = new Array(arraySize); // Disc roll, pitch, and yaw rate in rad/s\n\n  // Disc coordinate system\n  let acl_d = new Array(arraySize);\n  let vel_d = new Array(arraySize);\n  let rot_d = new Array(arraySize);\n\n  // Side-slip coordinate system\n  let acl_s = new Array(arraySize);\n  let vel_s = new Array(arraySize);\n  let rot_s = new Array(arraySize);\n  let beta = new Array(arraySize);\n\n  // Wind coordinate system\n  let acl_w = new Array(arraySize);\n  let vel_w = new Array(arraySize);\n  let alpha = new Array(arraySize);\n\n  // Aerodynamic forces\n  let drag = new Array(arraySize);\n  let lift = new Array(arraySize);\n  let mom = new Array(arraySize);\n\n  // Define disc orientation and velocity from inputs\n  ori_g[step] = vec3(roll_angle, nose_angle, 0);\n  vel_g[step] = vec3(\n    speed * Math.cos(launch_angle),\n    0,\n    speed * Math.sin(launch_angle)\n  );\n  let launch_angle_d = vec3(0, launch_angle, 0).applyMatrix3(\n    T.groundDisc(ori_g[step])\n  );\n  ori_g[step].add(launch_angle_d);\n\n  // Define environmental constants\n  pos_g[step] = vec3(0, 0, launch_height);\n\n  // Define derived constants\n  const diam = disc.diam;\n  const ixy = disc.jxy * mass; // Moment of inertia of disc about roll axis in kg-m^2\n  const iz = disc.jz * mass; // Moment of inertia of disc about spin agis in kg-m^2\n  const area = Math.PI * (0.5 * diam) ** 2; // Area of disc in m^2\n  const weight = g * mass; // Gravitational force acting on the disc centre of mass in N\n\n  // Loop until disc hits the ground, z-position=0\n  while (pos_g[step].z > 0) {\n    if (step >= maxSteps) break;\n\n    let ii = 0;\n    while (true) {\n      // Transform ground velocity to wind coordinate system\n      vel_d[step] = vel_g[step].clone().applyMatrix3(T.groundDisc(ori_g[step])); // Transform ground velocity to disc coordinate system\n      beta[step] = -Math.atan2(vel_d[step].y, vel_d[step].x); // Calculate side slip angle\n      vel_s[step] = vel_d[step].clone().applyMatrix3(T.discSlip(beta[step])); // Transform velocity to zero side slip coordinate system\n      alpha[step] = -Math.atan2(vel_s[step].z, vel_s[step].x); // Calculate angle of attack\n      vel_w[step] = vel_s[step].clone().applyMatrix3(T.slipWind(alpha[step])); // Transform velocity to wind coordinate system where aerodynamic calculations can be made\n\n      // Transform gravity loads to wind coordinate system\n      const grav_d = vec3(0, 0, -weight).applyMatrix3(\n        T.groundDisc(ori_g[step])\n      );\n      const grav_s = grav_d.clone().applyMatrix3(T.discSlip(beta[step]));\n      const grav_w = grav_s.clone().applyMatrix3(T.slipWind(alpha[step]));\n\n      // Calculate aerodynamic forces on the disc\n      drag[step] =\n        0.5 * rho * vel_w[step].x ** 2 * area * disc.getCd(alpha[step]); // Drag force in N\n      lift[step] =\n        0.5 * rho * vel_w[step].x ** 2 * area * disc.getCl(alpha[step]); // Lift force in N\n      mom[step] =\n        0.5 * rho * vel_w[step].x ** 2 * area * diam * disc.getCm(alpha[step]); // Calculate pitching moment in N-m\n\n      // Calculate body accelerations from second law and force balances\n      acl_w[step] = vec3();\n      rot_s[step] = vec3();\n      acl_w[step].x = (grav_w.x - drag[step]) / mass; // Acceleration due to drag\n      acl_w[step].z = (grav_w.z + lift[step]) / mass; // Acceleration due to lift\n      acl_w[step].y = grav_w.y / mass; // Acceleration due to side loading\n      rot_s[step].x = -mom[step] / (spin * (ixy - iz)); // Roll rate from pitching moment\n\n      // Transform disc acceleration to ground coordinate system\n      acl_s[step] = acl_w[step].clone().applyMatrix3(T.windSlip(alpha[step]));\n      acl_d[step] = acl_s[step].clone().applyMatrix3(T.slipDisc(beta[step]));\n      acl_g[step] = acl_d[step].clone().applyMatrix3(T.discGround(ori_g[step]));\n\n      // Transform roll rate from zero side-slip to ground coordinate system\n      rot_d[step] = rot_s[step].clone().applyMatrix3(T.slipDisc(beta[step]));\n      rot_g[step] = rot_d[step].clone().applyMatrix3(T.discGround(ori_g[step]));\n\n      // Perform one inner iteration to refine speed and position vectors\n      if (step === 0) break; // Do not run inner iterations for initial time step\n      if (ii >= 1) break; // Only run one inner iteration\n\n      // Calculate average accelerations and rotation rates between current and previous time steps\n      const avg_acl_g = acl_g[step - 1]\n        .clone()\n        .add(acl_g[step])\n        .multiplyScalar(0.5);\n      const avg_rot_g = rot_g[step - 1]\n        .clone()\n        .add(rot_g[step])\n        .multiplyScalar(0.5);\n\n      // Calculate new velocity, position, and orientation for current time step\n      vel_g[step] = vel_g[step - 1]\n        .clone()\n        .add(avg_acl_g.clone().multiplyScalar(dt));\n      pos_g[step] = pos_g[step - 1]\n        .clone()\n        .add(vel_g[step - 1].clone().multiplyScalar(dt))\n        .add(avg_acl_g.clone().multiplyScalar(0.5 * dt ** 2));\n      ori_g[step] = ori_g[step - 1]\n        .clone()\n        .add(avg_rot_g.clone().multiplyScalar(dt));\n\n      ii++;\n    }\n\n    // Estimate disc velocity, position, and orientation at next time step\n    vel_g[step + 1] = vel_g[step]\n      .clone()\n      .add(acl_g[step].clone().multiplyScalar(dt));\n    pos_g[step + 1] = pos_g[step]\n      .clone()\n      .add(vel_g[step].clone().multiplyScalar(dt))\n      .add(acl_g[step].clone().multiplyScalar(0.5 * dt ** 2));\n    ori_g[step + 1] = ori_g[step]\n      .clone()\n      .add(rot_g[step].clone().multiplyScalar(dt));\n\n    // Update simulation variables\n    t[step + 1] = t[step] + dt;\n    step++;\n  }\n\n  return {\n    t,\n    lift,\n    drag,\n    mom,\n    alpha,\n    beta,\n    pos_g,\n    vel_g,\n    acl_g,\n    ori_g,\n    rot_g,\n    vel_d,\n    vel_w,\n    acl_w,\n    rot_s,\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { ThrowInput } from \"./components/ThrowInput/ThrowInput\";\nimport { ViewBox } from \"./components/ViewBox/ViewBox\";\nimport { discs } from \"./simulation/discs\";\nimport huckit from \"./simulation/simulate.js\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      throws: [\n        {\n          disc: 0, // aviar\n          mass: 175,\n          speed: 50,\n          spin: 27,\n          direction: 1,\n          launchAngle: 10,\n          noseAngle: 4,\n          rollAngle: 8,\n          result: null,\n        },\n        {\n          disc: 1,\n          mass: 170,\n          speed: 30,\n          spin: 20,\n          direction: 1,\n          launchAngle: 8,\n          noseAngle: 6,\n          rollAngle: 0,\n          result: null,\n        },\n      ],\n      result: null,\n    };\n\n    this.handleThrowChange(0, this.state.throws[0]);\n  }\n\n  handleThrowChange(index, t) {\n    let params = [\n      (t.rollAngle * Math.PI) / 180.0,\n      (t.noseAngle * Math.PI) / 180.0,\n      (t.launchAngle * Math.PI) / 180.0,\n      1.8,\n      t.speed * 0.44704,\n      t.spin * t.direction * 2 * Math.PI,\n      t.mass,\n    ];\n    let res = huckit(discs[t.disc], ...params);\n    this.setState({ result: res });\n\n    let throws = [...this.state.throws];\n    throws[index] = t;\n    this.setState({ throws: throws });\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <div className=\"throw-container\">\n          <h2 className=\"throw-header\">Throws</h2>\n\n          <div className=\"throw-list\">\n            {this.state.throws.map((t, i) => (\n              <ThrowInput\n                key={i}\n                throw={t}\n                onThrowChange={this.handleThrowChange.bind(this, i)}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"view-container\">\n          <ViewBox result={this.state.result}></ViewBox>\n        </div>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}