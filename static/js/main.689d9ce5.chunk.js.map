{"version":3,"sources":["components/InlineNumberInput/InlineNumberInput.jsx","components/SelectInput/SelectInput.jsx","simulation/util.js","simulation/disc.js","simulation/discs.js","components/ThrowInput/ThrowInput.jsx","components/ViewBox/ViewBox.jsx","simulation/transform.js","simulation/simulate.js","App.js","reportWebVitals.js","index.js"],"names":["InlineNumberInput","props","id","uniqueId","className","htmlFor","label","name","type","value","onChange","event","SelectInput","children","interp","x","xp","yp","Array","isArray","map","a","b","length","vec3","y","z","THREE","Disc","this","aoarange","cl","cd","cm","jxy","jz","diam","aoa","aviar","wraith","discs","ThrowInput","useState","open","setOpen","handleChange","e","target","t","throw","onThrowChange","onClick","disc","index","mass","speed","spin","direction","launchAngle","noseAngle","rollAngle","ViewBox","radius","points","result","pos_g","v","eulers","ori_g","orientation","hyzer","Math","PI","lefts","i","applyEuler","add","rights","normals","ribbonGeometry","useMemo","vertices","norms","colours","c","interpolateSpectral","exp","toArray","push","indices","geom","setIndex","setAttribute","flat","camera","position","OrbitControls","color","decay","scale","rotation","object","attach","toneMapped","vertexColors","side","args","Transform","angles","phi","theta","psi","cosPhi","cos","cosTheta","cosPsi","sinPhi","sin","sinTheta","sinPsi","set","beta","alpha","dt","arraySize","maxSteps","huckit","roll_angle","nose_angle","launch_angle","launch_height","step","vel_g","acl_g","rot_g","acl_d","vel_d","rot_d","acl_s","vel_s","rot_s","acl_w","vel_w","drag","lift","mom","launch_angle_d","applyMatrix3","T","groundDisc","ixy","iz","area","weight","ii","clone","atan2","discSlip","slipWind","grav_w","getCd","getCl","getCm","windSlip","slipDisc","discGround","avg_acl_g","multiplyScalar","avg_rot_g","slice","App","throws","simulate","state","params","setState","handleThrowChange","bind","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.689d9ce5.chunk.js","sourcesContent":["import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport \"./InlineNumberInput.css\";\n\nexport function InlineNumberInput(props) {\n\tconst id = uniqueId();\n\tconst handleChange = (event) => props.onChange(event);\n\n\treturn (\n\t\t<div className=\"inline-number-input\">\n\t\t\t<label htmlFor={id}>{props.label}</label>\n\t\t\t<input\n\t\t\t\tid={id}\n\t\t\t\tname={props.name}\n\t\t\t\ttype=\"number\"\n\t\t\t\tvalue={props.value}\n\t\t\t\tonChange={handleChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport \"./SelectInput.css\";\n\nexport function SelectInput(props) {\n\tconst id = uniqueId();\n\tconst handleChange = (event) => props.onChange(event);\n\n\treturn (\n\t\t<div className=\"select-input\">\n\t\t\t<label htmlFor={id}>{props.label}</label>\n\t\t\t<select\n\t\t\t\tid={id}\n\t\t\t\tname={props.name}\n\t\t\t\tvalue={props.value}\n\t\t\t\tonChange={handleChange}\n\t\t\t>\n\t\t\t\t{props.children}\n\t\t\t</select>\n\t\t</div>\n\t);\n}\n","import * as THREE from 'three';\n\n/**\n * Piecewise linear interpolation of the y value at x, given x and y\n * coordinates defining points on the piecewise line\n * @param {number} x x coordinate to interpolate y value\n * @param {Array} xp x coordinates\n * @param {Array} yp y coordinates\n * @returns {number}\n */\nexport function interp(x, xp, yp) {\n    if (Array.isArray(x)) return x.map(value => interp(value, xp, yp));\n    if (x < xp[0]) return yp[0];\n    let a = 0, b = 1;\n    for (; a < xp.length - 1; a++, b++) {\n        if (xp[a + 1] > x) {\n            return (yp[a] * (xp[b] - x) + yp[b] * (x - xp[a])) / (xp[b] - xp[a]);\n        }\n    }\n    return yp[yp.length - 1];\n}\n\nexport function vec3(x, y, z) {\n    return new THREE.Vector3(x, y, z);\n}\n\nexport function mat3(a1, a2, a3, b1, b2, b3, c1, c2, c3) {\n    return new THREE.Matrix3().set(a1, a2, a3, b1, b2, b3, c1, c2, c3);\n}","import { interp } from './util';\n\nexport default class Disc {\n    constructor(name) {\n      this.name = name;\n      this.aoarange = [0]; // Angle of Attact at which the aerodynamic coefficients have been measured. Must be sorted in ascending order\n      this.cl = [0]; // Coefficients of lift for each AoA\n      this.cd = [0]; // Coefficients of drag for each AoA\n      this.cm = [0]; // Coefficients of pitching moment for each AoA\n      this.jxy = 0; // Normalized mass moment of inertia about the roll/pitch axis in m^2\n      this.jz = 0; // Normalized mass moment of inertia about the spin axis in m^2\n      this.diam = 0; // Disc diameter in m\n    }\n    \n    getCl(aoa) {\n      return interp(aoa, this.aoarange, this.cl);\n    }\n    \n    getCd(aoa) {\n      return interp(aoa, this.aoarange, this.cd);\n    }\n    \n    getCm(aoa) {\n      return interp(aoa, this.aoarange, this.cm);\n    }\n  }","import Disc from './disc';\n\nexport const aviar = new Disc(\"Aviar\");\naviar.aoarange = [-1.570796327, -0.5235987756, -0.0872664626, -0.06981317008, -0.05235987756, -0.03490658504, -0.01745329252, 0, 0.01745329252, 0.03490658504, 0.05235987756, 0.06981317008, 0.0872664626, 0.1047197551, 0.1221730476, 0.1396263402, 0.1570796327, 0.1745329252, 0.1919862177, 0.2094395102, 0.2268928028, 0.2443460953, 0.2617993878, 0.7853981634, 0.872664626, 1.570796327];\naviar.cl = [0, -1, -0.088, -0.049, -0.009, 0.034, 0.093, 0.154, 0.21, 0.256, 0.304, 0.343, 0.383, 0.426, 0.468, 0.508, 0.549, 0.591, 0.631, 0.672, 0.702, 0.74, 0.78, 1.6, 0.8, 0];\naviar.cd = [0.4, 0.188, 0.076, 0.071, 0.07, 0.072, 0.072, 0.084, 0.088, 0.085, 0.102, 0.117, 0.133, 0.141, 0.157, 0.174, 0.189, 0.203, 0.216, 0.226, 0.245, 0.266, 0.281, 0.7, 0.5, 0.6];\naviar.cm = [0, -0.08, -0.015, -0.016, -0.011, -0.01, -0.013, -0.018, -0.018, -0.017, -0.014, -0.014, -0.011, -0.008, -0.005, 0, 0.005, 0.009, 0.011, 0.02, 0.024, 0.032, 0.039, 0.23, 0.02, 0];\naviar.jxy = 4.23e-3;\naviar.jz = 8.46e-3;\naviar.diam = 0.21;\n\n// Placeholder data, just a copy of Aviar for now\nexport const wraith = new Disc(\"Wraith\");\nwraith.aoarange = [-1.570796327, -0.5235987756, -0.0872664626, -0.06981317008, -0.05235987756, -0.03490658504, -0.01745329252, 0, 0.01745329252, 0.03490658504, 0.05235987756, 0.06981317008, 0.0872664626, 0.1047197551, 0.1221730476, 0.1396263402, 0.1570796327, 0.1745329252, 0.1919862177, 0.2094395102, 0.2268928028, 0.2443460953, 0.2617993878, 0.7853981634, 0.872664626, 1.570796327];\nwraith.cl = [0, -1, -0.088, -0.049, -0.009, 0.034, 0.093, 0.154, 0.21, 0.256, 0.304, 0.343, 0.383, 0.426, 0.468, 0.508, 0.549, 0.591, 0.631, 0.672, 0.702, 0.74, 0.78, 1.6, 0.8, 0];\nwraith.cd = [0.4, 0.188, 0.076, 0.071, 0.07, 0.072, 0.072, 0.084, 0.088, 0.085, 0.102, 0.117, 0.133, 0.141, 0.157, 0.174, 0.189, 0.203, 0.216, 0.226, 0.245, 0.266, 0.281, 0.7, 0.5, 0.6];\nwraith.cm = [0, -0.08, -0.015, -0.016, -0.011, -0.01, -0.013, -0.018, -0.018, -0.017, -0.014, -0.014, -0.011, -0.008, -0.005, 0, 0.005, 0.009, 0.011, 0.02, 0.024, 0.032, 0.039, 0.23, 0.02, 0];\nwraith.jxy = 4.23e-3;\nwraith.jz = 8.46e-3;\nwraith.diam = 0.21;\n\nexport const discs = [aviar, wraith];","import React, { useState } from \"react\";\nimport { InlineNumberInput } from \"../InlineNumberInput/InlineNumberInput\";\nimport { SelectInput } from \"../SelectInput/SelectInput\";\nimport { discs } from \"../../simulation/discs\";\nimport \"./ThrowInput.css\";\n\nexport function ThrowInput(props) {\n\tconst [open, setOpen] = useState(false);\n\n\tconst handleChange = (e) => {\n\t\tlet target = e.target.name;\n\t\tlet t = props.throw;\n\t\tt[target] = e.target.value;\n\t\tprops.onThrowChange(t);\n\t};\n\n\tconst t = props.throw;\n\n\treturn (\n\t\t<div className=\"throw-input\">\n\t\t\t<header onClick={() => setOpen(!open)}>\n\t\t\t\t<span className=\"heading\">{discs[t.disc].name}</span>\n\t\t\t</header>\n\n\t\t\t{open && (\n\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlabel=\"Disc\"\n\t\t\t\t\t\tname=\"disc\"\n\t\t\t\t\t\tvalue={t.disc}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t>\n\t\t\t\t\t\t{discs.map((disc, index) => (\n\t\t\t\t\t\t\t<option key={disc.name} value={index}>{disc.name}</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</SelectInput>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Mass (g)\"\n\t\t\t\t\t\tname=\"mass\"\n\t\t\t\t\t\tvalue={t.mass}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Speed (mph)\"\n\t\t\t\t\t\tname=\"speed\"\n\t\t\t\t\t\tvalue={t.speed}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Spin (rev/s)\"\n\t\t\t\t\t\tname=\"spin\"\n\t\t\t\t\t\tvalue={t.spin}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlabel=\"Dir.\"\n\t\t\t\t\t\tname=\"direction\"\n\t\t\t\t\t\tvalue={t.direction}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"1\">Clockwise (RHBH/LHFH)</option>\n\t\t\t\t\t\t<option value=\"-1\">Anti-Clockwise (LHBH/RHFH)</option>\n\t\t\t\t\t</SelectInput>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Launch Angle (deg)\"\n\t\t\t\t\t\tname=\"launchAngle\"\n\t\t\t\t\t\tvalue={t.launchAngle}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Nose Angle (deg)\"\n\t\t\t\t\t\tname=\"noseAngle\"\n\t\t\t\t\t\tvalue={t.noseAngle}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineNumberInput\n\t\t\t\t\t\tlabel=\"Roll Angle (deg)\"\n\t\t\t\t\t\tname=\"rollAngle\"\n\t\t\t\t\t\tvalue={t.rollAngle}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import React, { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { interpolateSpectral } from \"d3-scale-chromatic\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { vec3 } from \"../../simulation/util\";\nimport \"./ViewBox.css\";\n\nexport function ViewBox(props) {\n    const radius = 0.1;\n    const aspect = 0.1;\n\n    // fix coordinate system\n    const points = props.result.pos_g.map((v) => vec3(v.y, v.z, v.x));\n    // ori_g: x=roll y=pitch z=yaw, applied in that order\n    const eulers = props.result.ori_g.map(orientation => new THREE.Euler(-orientation.y, orientation.z, -orientation.x, 'ZXY'));\n    const hyzer = props.result.ori_g.map(orientation => (orientation.x + Math.PI / 2) / Math.PI);\n    const intensity = 30;\n    const intensify = x => 1/(1+Math.exp(intensity*(x-0.5)));\n\n    const lefts = eulers.map((e, i) => vec3(-radius, 0, 0).applyEuler(e).add(points[i]));\n    const rights = eulers.map((e, i) => vec3(radius, 0, 0).applyEuler(e).add(points[i]));\n    const normals = eulers.map(e => vec3(0, -1, 0).applyEuler(e));\n\n    const ribbonGeometry = useMemo(() => {\n\n        let vertices = [];\n        let norms = [];\n        let colours = [];\n        for (let i = 0; i < lefts.length; i++) {\n            let c = new THREE.Color(interpolateSpectral(intensify(hyzer[i]))).toArray();\n\n            vertices.push(lefts[i].toArray());\n            norms.push(normals[i].toArray());\n            colours.push(c);\n\n            vertices.push(rights[i].toArray());\n            norms.push(normals[i].toArray());\n            colours.push(c);\n        }\n\n        let indices = [];\n        for (let i = 0; i < lefts.length - 1; i++) {\n            indices.push(i * 2, i * 2 + 1, i * 2 + 2); // triangle 1\n            indices.push(i * 2 + 1, i * 2 + 3, i * 2 + 2); // triangle 2\n        }\n\n        let geom = new THREE.BufferGeometry();\n        geom.setIndex(indices);\n        geom.setAttribute('position', new THREE.Float32BufferAttribute(vertices.flat(), 3));\n        geom.setAttribute('normal', new THREE.Float32BufferAttribute(norms.flat(), 3));\n        geom.setAttribute('color', new THREE.Float32BufferAttribute(colours.flat(), 3));\n        return geom;\n    }, [lefts, rights, normals, hyzer])\n\n\n    const width = 10;\n    const length = 70;\n\n    return (\n        <Canvas camera={{ position: [0, 0, -5] }}>\n            <OrbitControls />\n\n            <ambientLight color={0x404040} />\n            <pointLight position={[0, 20, 25]} decay={2} />\n\n            <mesh scale={[radius, radius*aspect, radius]} position={points[0]} rotation={eulers[0]}>\n                <sphereGeometry />\n                <meshStandardMaterial color=\"#ffa500\" />\n            </mesh>\n\n            <mesh>\n                <primitive object={ribbonGeometry} attach=\"geometry\" />\n                <meshBasicMaterial toneMapped={false} vertexColors side={THREE.DoubleSide} />\n            </mesh>\n\n            <mesh position={[0, 0, length / 2]} rotation={[-Math.PI / 2, 0, 0]}>\n                <planeGeometry args={[width, length]} />\n                <meshStandardMaterial color=\"#00aa00\" />\n            </mesh>\n        </Canvas>\n    );\n}\n","import * as THREE from 'three';\n\nexport default class Transform {\n    static groundDisc(angles) {\n      const phi = angles.x;\n      const theta = angles.y;\n      const psi = angles.z;\n      \n      const cosPhi = Math.cos(phi);\n      const cosTheta = Math.cos(theta);\n      const cosPsi = Math.cos(psi);\n  \n      const sinPhi = Math.sin(phi);\n      const sinTheta = Math.sin(theta);\n      const sinPsi = Math.sin(psi);\n      \n      return new THREE.Matrix3().set(\n        cosTheta*cosPsi,  sinPhi*sinTheta*cosPsi - cosPhi*sinPsi,   cosPhi*sinTheta*cosPsi + sinPhi*sinPhi,\n        cosTheta*sinPsi,  sinPhi*sinTheta*sinPsi + cosPhi*cosPsi,   cosPhi*sinTheta*sinPsi - sinPhi*cosPsi,\n        -sinTheta,        sinPhi*cosTheta,                          cosPhi*cosTheta\n      );\n    }\n    \n    static discGround(angles) {\n      const phi = angles.x;\n      const theta = angles.y;\n      const psi = angles.z;\n  \n      const cosPhi = Math.cos(phi);\n      const cosTheta = Math.cos(theta);\n      const cosPsi = Math.cos(psi);\n  \n      const sinPhi = Math.sin(phi);\n      const sinTheta = Math.sin(theta);\n      const sinPsi = Math.sin(psi);\n  \n      return new THREE.Matrix3().set(\n        cosTheta*cosPsi,                         cosTheta*sinPsi,                         -sinTheta,\n        sinPhi*sinTheta*cosPsi - cosPhi*sinPsi,  sinPhi*sinTheta*sinPsi + cosPhi*cosPsi,  sinPhi*cosTheta,\n        cosPhi*sinTheta*cosPsi + sinPhi*sinPsi,  cosPhi*sinTheta*sinPsi - sinPhi*cosPsi,  cosPhi*cosTheta\n      );\n    }\n    \n    static discSlip(beta) {\n      const cos = Math.cos(beta);\n      const sin = Math.sin(beta);\n      \n      return new THREE.Matrix3().set(\n        cos, -sin, 0,\n        sin, cos,  0,\n        0,   0,    1\n      );\n    }\n    \n    static slipDisc(beta) {\n      const cos = Math.cos(beta);\n      const sin = Math.sin(beta);\n      \n      return new THREE.Matrix3().set(\n        cos, sin, 0,\n        -sin, cos,  0,\n        0,   0,    1\n      );\n    }\n    \n    static slipWind(alpha) {\n      const cos = Math.cos(alpha);\n      const sin = Math.sin(alpha);\n      \n      return new THREE.Matrix3().set(\n        cos, 0,  -sin,\n        0,   1,  0,\n        sin, 0,  cos\n      );\n    }\n    \n    static windSlip(alpha) {\n      const cos = Math.cos(alpha);\n      const sin = Math.sin(alpha);\n      \n      return new THREE.Matrix3().set(\n        cos, 0,  sin,\n        0,   1,  0,\n        -sin, 0,  cos\n      );\n    }\n  }","import T from \"./transform\";\nimport { vec3 } from \"./util\";\n\nconst rho = 1.18; // Air density in kg/m^3\nconst g = 9.81; // Gravitational acceleration in m/s^2\n\nconst dt = 0.01; // Timestep in seconds\nconst maxSteps = 1000;\nconst arraySize = maxSteps + 1;\n\n/**\n * Simulates a disc and throw based on the method in _Simulation of a\n * spin stabilized sports disc_, Crowther and Potts (2007)\n * and [HuckIt](https://colab.research.google.com/drive/1fwoivf9S6tro1A23yEetisPgexmhfjIK?usp=sharing#scrollTo=PwVmextgTsy7)\n * @typedef { import(\"./disc.js\").default } Disc\n * @param {Disc} disc disc to simulate\n * @param {number} roll_angle in radians\n * @param {number} nose_angle in radians\n * @param {number} launch_angle in radians\n * @param {number} launch_height in metres\n * @param {number} speed in metres per second\n * @param {number} spin in radians per second\n * @param {number} mass in grams\n */\nexport default function huckit(\n  disc,\n  roll_angle,\n  nose_angle,\n  launch_angle,\n  launch_height,\n  speed,\n  spin,\n  mass\n) {\n  // Simulation controls\n  let step = 0; // Current step\n  let t = new Array(arraySize);\n\n  // Ground coordinate system\n  let pos_g = new Array(arraySize); // Disc position in m\n  let vel_g = new Array(arraySize); // Disc velocity in m/s\n  let acl_g = new Array(arraySize); // Disc acceleration in m/s^2\n  let ori_g = new Array(arraySize); // Disc roll, pitch, and yaw in rad\n  let rot_g = new Array(arraySize); // Disc roll, pitch, and yaw rate in rad/s\n\n  // Disc coordinate system\n  let acl_d = new Array(arraySize);\n  let vel_d = new Array(arraySize);\n  let rot_d = new Array(arraySize);\n\n  // Side-slip coordinate system\n  let acl_s = new Array(arraySize);\n  let vel_s = new Array(arraySize);\n  let rot_s = new Array(arraySize);\n  let beta = new Array(arraySize);\n\n  // Wind coordinate system\n  let acl_w = new Array(arraySize);\n  let vel_w = new Array(arraySize);\n  let alpha = new Array(arraySize);\n\n  // Aerodynamic forces\n  let drag = new Array(arraySize);\n  let lift = new Array(arraySize);\n  let mom = new Array(arraySize);\n\n  // Define disc orientation and velocity from inputs\n  ori_g[step] = vec3(roll_angle, nose_angle, 0);\n  vel_g[step] = vec3(\n    speed * Math.cos(launch_angle),\n    0,\n    speed * Math.sin(launch_angle)\n  );\n  let launch_angle_d = vec3(0, launch_angle, 0).applyMatrix3(\n    T.groundDisc(ori_g[step])\n  );\n  ori_g[step].add(launch_angle_d);\n\n  // Define environmental constants\n  pos_g[step] = vec3(0, 0, launch_height);\n\n  // Define derived constants\n  const diam = disc.diam;\n  const ixy = disc.jxy * mass; // Moment of inertia of disc about roll axis in kg-m^2\n  const iz = disc.jz * mass; // Moment of inertia of disc about spin agis in kg-m^2\n  const area = Math.PI * (0.5 * diam) ** 2; // Area of disc in m^2\n  const weight = g * mass; // Gravitational force acting on the disc centre of mass in N\n\n  // Loop until disc hits the ground, z-position=0\n  while (pos_g[step].z > 0) {\n    if (step >= maxSteps) break;\n\n    let ii = 0;\n    while (true) {\n      // Transform ground velocity to wind coordinate system\n      vel_d[step] = vel_g[step].clone().applyMatrix3(T.groundDisc(ori_g[step])); // Transform ground velocity to disc coordinate system\n      beta[step] = -Math.atan2(vel_d[step].y, vel_d[step].x); // Calculate side slip angle\n      vel_s[step] = vel_d[step].clone().applyMatrix3(T.discSlip(beta[step])); // Transform velocity to zero side slip coordinate system\n      alpha[step] = -Math.atan2(vel_s[step].z, vel_s[step].x); // Calculate angle of attack\n      vel_w[step] = vel_s[step].clone().applyMatrix3(T.slipWind(alpha[step])); // Transform velocity to wind coordinate system where aerodynamic calculations can be made\n\n      // Transform gravity loads to wind coordinate system\n      const grav_d = vec3(0, 0, -weight).applyMatrix3(\n        T.groundDisc(ori_g[step])\n      );\n      const grav_s = grav_d.clone().applyMatrix3(T.discSlip(beta[step]));\n      const grav_w = grav_s.clone().applyMatrix3(T.slipWind(alpha[step]));\n\n      // Calculate aerodynamic forces on the disc\n      drag[step] =\n        0.5 * rho * vel_w[step].x ** 2 * area * disc.getCd(alpha[step]); // Drag force in N\n      lift[step] =\n        0.5 * rho * vel_w[step].x ** 2 * area * disc.getCl(alpha[step]); // Lift force in N\n      mom[step] =\n        0.5 * rho * vel_w[step].x ** 2 * area * diam * disc.getCm(alpha[step]); // Calculate pitching moment in N-m\n\n      // Calculate body accelerations from second law and force balances\n      acl_w[step] = vec3();\n      rot_s[step] = vec3();\n      acl_w[step].x = (grav_w.x - drag[step]) / mass; // Acceleration due to drag\n      acl_w[step].z = (grav_w.z + lift[step]) / mass; // Acceleration due to lift\n      acl_w[step].y = grav_w.y / mass; // Acceleration due to side loading\n      rot_s[step].x = -mom[step] / (spin * (ixy - iz)); // Roll rate from pitching moment\n\n      // Transform disc acceleration to ground coordinate system\n      acl_s[step] = acl_w[step].clone().applyMatrix3(T.windSlip(alpha[step]));\n      acl_d[step] = acl_s[step].clone().applyMatrix3(T.slipDisc(beta[step]));\n      acl_g[step] = acl_d[step].clone().applyMatrix3(T.discGround(ori_g[step]));\n\n      // Transform roll rate from zero side-slip to ground coordinate system\n      rot_d[step] = rot_s[step].clone().applyMatrix3(T.slipDisc(beta[step]));\n      rot_g[step] = rot_d[step].clone().applyMatrix3(T.discGround(ori_g[step]));\n\n      // Perform one inner iteration to refine speed and position vectors\n      if (step === 0) break; // Do not run inner iterations for initial time step\n      if (ii >= 1) break; // Only run one inner iteration\n\n      // Calculate average accelerations and rotation rates between current and previous time steps\n      const avg_acl_g = acl_g[step - 1]\n        .clone()\n        .add(acl_g[step])\n        .multiplyScalar(0.5);\n      const avg_rot_g = rot_g[step - 1]\n        .clone()\n        .add(rot_g[step])\n        .multiplyScalar(0.5);\n\n      // Calculate new velocity, position, and orientation for current time step\n      vel_g[step] = vel_g[step - 1]\n        .clone()\n        .add(avg_acl_g.clone().multiplyScalar(dt));\n      pos_g[step] = pos_g[step - 1]\n        .clone()\n        .add(vel_g[step - 1].clone().multiplyScalar(dt))\n        .add(avg_acl_g.clone().multiplyScalar(0.5 * dt ** 2));\n      ori_g[step] = ori_g[step - 1]\n        .clone()\n        .add(avg_rot_g.clone().multiplyScalar(dt));\n\n      ii++;\n    }\n\n    // Estimate disc velocity, position, and orientation at next time step\n    vel_g[step + 1] = vel_g[step]\n      .clone()\n      .add(acl_g[step].clone().multiplyScalar(dt));\n    pos_g[step + 1] = pos_g[step]\n      .clone()\n      .add(vel_g[step].clone().multiplyScalar(dt))\n      .add(acl_g[step].clone().multiplyScalar(0.5 * dt ** 2));\n    ori_g[step + 1] = ori_g[step]\n      .clone()\n      .add(rot_g[step].clone().multiplyScalar(dt));\n\n    // Update simulation variables\n    t[step + 1] = t[step] + dt;\n    step++;\n  }\n\n  return {\n    t: t.slice(0, step),\n    lift: lift.slice(0, step),\n    drag: drag.slice(0, step),\n    mom: mom.slice(0, step),\n    alpha: alpha.slice(0, step),\n    beta: beta.slice(0, step),\n    pos_g: pos_g.slice(0, step),\n    vel_g: vel_g.slice(0, step),\n    acl_g: acl_g.slice(0, step),\n    ori_g: ori_g.slice(0, step),\n    rot_g: rot_g.slice(0, step),\n    vel_d: vel_d.slice(0, step),\n    vel_w: vel_w.slice(0, step),\n    acl_w: acl_w.slice(0, step),\n    rot_s: rot_s.slice(0, step),\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { ThrowInput } from \"./components/ThrowInput/ThrowInput\";\nimport { ViewBox } from \"./components/ViewBox/ViewBox\";\nimport { discs } from \"./simulation/discs\";\nimport huckit from \"./simulation/simulate.js\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    let throws = [\n      {\n        id: 0,\n        disc: 0, // aviar\n        mass: 175,\n        speed: 50,\n        spin: 27,\n        direction: 1,\n        launchAngle: 10,\n        noseAngle: 4,\n        rollAngle: 8,\n      },\n      {\n        id: 1,\n        disc: 1,\n        mass: 170,\n        speed: 30,\n        spin: 20,\n        direction: 1,\n        launchAngle: 8,\n        noseAngle: 6,\n        rollAngle: 0,\n      },\n    ];\n    let result = this.simulate(throws[0]);\n    this.state = {\n      throws: throws,\n      result: result,\n    };\n  }\n\n  simulate(t) {\n    let params = [\n      (t.rollAngle * Math.PI) / 180.0,\n      (t.noseAngle * Math.PI) / 180.0,\n      (t.launchAngle * Math.PI) / 180.0,\n      1.8,\n      t.speed * 0.44704,\n      t.spin * t.direction * 2 * Math.PI,\n      t.mass / 1000,\n    ];\n    return huckit(discs[t.disc], ...params);\n  }\n\n  handleThrowChange(index, t) {\n    let result = this.simulate(t);\n    this.setState({ result: result });\n\n    let throws = [...this.state.throws];\n    throws[index] = t;\n    this.setState({ throws: throws });\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <div className=\"throw-container\">\n          <h2 className=\"throw-header\">Throws</h2>\n\n          <div className=\"throw-list\">\n            {this.state.throws.map((t, i) => (\n              <ThrowInput\n                key={t.id}\n                throw={t}\n                onThrowChange={this.handleThrowChange.bind(this, i)}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"view-container\">\n          <ViewBox result={this.state.result}></ViewBox>\n        </div>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}